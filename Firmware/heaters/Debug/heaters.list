
heaters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f00  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004098  08004098  00005098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c8  080040c8  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080040c8  080040c8  000050c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040d0  080040d0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040d0  080040d0  000050d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080040d4  080040d4  000050d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080040d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000000c  080040e4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080040e4  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e233  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f19  00000000  00000000  0001426f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00016188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ba1  00000000  00000000  00017058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001541a  00000000  00000000  00017bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010053  00000000  00000000  0002d013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c81d  00000000  00000000  0003d066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9883  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f7c  00000000  00000000  000c98c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000cd844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004080 	.word	0x08004080

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004080 	.word	0x08004080

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f001 f817 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f8c9 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fac1 	bl	8000a98 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000516:	f000 f95b 	bl	80007d0 <MX_SPI1_Init>
  MX_TIM3_Init();
 800051a:	f000 fa6f 	bl	80009fc <MX_TIM3_Init>
  MX_TIM1_Init();
 800051e:	f000 f98f 	bl	8000840 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000522:	f000 f9c9 	bl	80008b8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000526:	f000 f925 	bl	8000774 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  PID_Init(&PID0,
 800052a:	eeb5 4a00 	vmov.f32	s8, #80	@ 0x3e800000  0.250
 800052e:	eddf 3a53 	vldr	s7, [pc, #332]	@ 800067c <main+0x178>
 8000532:	ed9f 3a52 	vldr	s6, [pc, #328]	@ 800067c <main+0x178>
 8000536:	eddf 2a51 	vldr	s5, [pc, #324]	@ 800067c <main+0x178>
 800053a:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 800067c <main+0x178>
 800053e:	eddf 1a4f 	vldr	s3, [pc, #316]	@ 800067c <main+0x178>
 8000542:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 800067c <main+0x178>
 8000546:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 800067c <main+0x178>
 800054a:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 800067c <main+0x178>
 800054e:	484c      	ldr	r0, [pc, #304]	@ (8000680 <main+0x17c>)
 8000550:	f000 fcf9 	bl	8000f46 <PID_Init>
  		  0, 	//limMIN
  		  0, 	//limMAX
  		  0, 	//limMinInt
  		  0, 	//limMaxInt
	  0.250);	// tsample
  PID_Init(&PID1,
 8000554:	eeb5 4a00 	vmov.f32	s8, #80	@ 0x3e800000  0.250
 8000558:	eddf 3a48 	vldr	s7, [pc, #288]	@ 800067c <main+0x178>
 800055c:	ed9f 3a47 	vldr	s6, [pc, #284]	@ 800067c <main+0x178>
 8000560:	eddf 2a46 	vldr	s5, [pc, #280]	@ 800067c <main+0x178>
 8000564:	ed9f 2a45 	vldr	s4, [pc, #276]	@ 800067c <main+0x178>
 8000568:	eddf 1a44 	vldr	s3, [pc, #272]	@ 800067c <main+0x178>
 800056c:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 800067c <main+0x178>
 8000570:	eddf 0a42 	vldr	s1, [pc, #264]	@ 800067c <main+0x178>
 8000574:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 800067c <main+0x178>
 8000578:	4842      	ldr	r0, [pc, #264]	@ (8000684 <main+0x180>)
 800057a:	f000 fce4 	bl	8000f46 <PID_Init>
		  0, 	//limMIN
		  0, 	//limMAX
		  0, 	//limMinInt
		  0, 	//limMaxInt
  	  0.250);	// tsample
  PID_Init(&PID2,
 800057e:	eeb5 4a00 	vmov.f32	s8, #80	@ 0x3e800000  0.250
 8000582:	eddf 3a3e 	vldr	s7, [pc, #248]	@ 800067c <main+0x178>
 8000586:	ed9f 3a3d 	vldr	s6, [pc, #244]	@ 800067c <main+0x178>
 800058a:	eddf 2a3c 	vldr	s5, [pc, #240]	@ 800067c <main+0x178>
 800058e:	ed9f 2a3b 	vldr	s4, [pc, #236]	@ 800067c <main+0x178>
 8000592:	eddf 1a3a 	vldr	s3, [pc, #232]	@ 800067c <main+0x178>
 8000596:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 800067c <main+0x178>
 800059a:	eddf 0a38 	vldr	s1, [pc, #224]	@ 800067c <main+0x178>
 800059e:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 800067c <main+0x178>
 80005a2:	4839      	ldr	r0, [pc, #228]	@ (8000688 <main+0x184>)
 80005a4:	f000 fccf 	bl	8000f46 <PID_Init>
		  0, 	//limMinInt
		  0, 	//limMaxInt
  	  0.250);	// tsample

  	// Themocuples initialization
	MAX6675_Init(&tempSensors, &hspi1);
 80005a8:	4938      	ldr	r1, [pc, #224]	@ (800068c <main+0x188>)
 80005aa:	4839      	ldr	r0, [pc, #228]	@ (8000690 <main+0x18c>)
 80005ac:	f000 fb1e 	bl	8000bec <MAX6675_Init>
	MAX6675_AddDevice(&tempSensors, 0);
 80005b0:	2100      	movs	r1, #0
 80005b2:	4837      	ldr	r0, [pc, #220]	@ (8000690 <main+0x18c>)
 80005b4:	f000 fb7c 	bl	8000cb0 <MAX6675_AddDevice>
	MAX6675_AddDevice(&tempSensors, 1);
 80005b8:	2101      	movs	r1, #1
 80005ba:	4835      	ldr	r0, [pc, #212]	@ (8000690 <main+0x18c>)
 80005bc:	f000 fb78 	bl	8000cb0 <MAX6675_AddDevice>
	MAX6675_AddDevice(&tempSensors, 2);
 80005c0:	2102      	movs	r1, #2
 80005c2:	4833      	ldr	r0, [pc, #204]	@ (8000690 <main+0x18c>)
 80005c4:	f000 fb74 	bl	8000cb0 <MAX6675_AddDevice>
	MAX6675_AddDevice(&tempSensors, 3);
 80005c8:	2103      	movs	r1, #3
 80005ca:	4831      	ldr	r0, [pc, #196]	@ (8000690 <main+0x18c>)
 80005cc:	f000 fb70 	bl	8000cb0 <MAX6675_AddDevice>
	HAL_TIM_Base_Start_IT(&htim3); // Timer for periodic sampling
 80005d0:	4830      	ldr	r0, [pc, #192]	@ (8000694 <main+0x190>)
 80005d2:	f002 fd5f 	bl	8003094 <HAL_TIM_Base_Start_IT>

	// Phase control
	HAL_TIM_OnePulse_Start(&htim2, TIM_CHANNEL_1);
 80005d6:	2100      	movs	r1, #0
 80005d8:	482f      	ldr	r0, [pc, #188]	@ (8000698 <main+0x194>)
 80005da:	f002 fe67 	bl	80032ac <HAL_TIM_OnePulse_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Check bti0 for temperature sensing and PIDs feedback-input updates
	if (timers_isr & 0x01) {
 80005de:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <main+0x198>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <main+0xda>
		timers_isr &= ~0x01;
 80005ea:	4b2c      	ldr	r3, [pc, #176]	@ (800069c <main+0x198>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	f023 0301 	bic.w	r3, r3, #1
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	4b29      	ldr	r3, [pc, #164]	@ (800069c <main+0x198>)
 80005f6:	701a      	strb	r2, [r3, #0]

		// Sample temperatures
		for (uint8_t sensor = 0; sensor < 3; sensor++) {
 80005f8:	2300      	movs	r3, #0
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	e00a      	b.n	8000614 <main+0x110>
			// Individual max6675 sensor's reading
			MAX6675_ReadTemperature(&tempSensors, sensor);
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4619      	mov	r1, r3
 8000602:	4823      	ldr	r0, [pc, #140]	@ (8000690 <main+0x18c>)
 8000604:	f000 fba4 	bl	8000d50 <MAX6675_ReadTemperature>
			HAL_Delay(1); // (250); // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
 8000608:	2001      	movs	r0, #1
 800060a:	f001 f809 	bl	8001620 <HAL_Delay>
		for (uint8_t sensor = 0; sensor < 3; sensor++) {
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	3301      	adds	r3, #1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b02      	cmp	r3, #2
 8000618:	d9f1      	bls.n	80005fe <main+0xfa>
		}
		// Take each measurements and compute chamber's temperature
		for (uint8_t sensor = 0; sensor < 3; sensor++) {
 800061a:	2300      	movs	r3, #0
 800061c:	71bb      	strb	r3, [r7, #6]
 800061e:	e00b      	b.n	8000638 <main+0x134>
			MAX6675_GetTemperature(&tempSensors, sensor, tempReadings + sensor);
 8000620:	79bb      	ldrb	r3, [r7, #6]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4a1e      	ldr	r2, [pc, #120]	@ (80006a0 <main+0x19c>)
 8000626:	441a      	add	r2, r3
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	4619      	mov	r1, r3
 800062c:	4818      	ldr	r0, [pc, #96]	@ (8000690 <main+0x18c>)
 800062e:	f000 fc59 	bl	8000ee4 <MAX6675_GetTemperature>
		for (uint8_t sensor = 0; sensor < 3; sensor++) {
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	3301      	adds	r3, #1
 8000636:	71bb      	strb	r3, [r7, #6]
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	2b02      	cmp	r3, #2
 800063c:	d9f0      	bls.n	8000620 <main+0x11c>
		}
		// Update PIDs
		PID_Update(&PID0, 0, tempReadings[0]);
 800063e:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <main+0x19c>)
 8000640:	edd3 7a00 	vldr	s15, [r3]
 8000644:	eef0 0a67 	vmov.f32	s1, s15
 8000648:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800067c <main+0x178>
 800064c:	480c      	ldr	r0, [pc, #48]	@ (8000680 <main+0x17c>)
 800064e:	f000 fcc5 	bl	8000fdc <PID_Update>
		PID_Update(&PID1, 0, tempReadings[1]);
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <main+0x19c>)
 8000654:	edd3 7a01 	vldr	s15, [r3, #4]
 8000658:	eef0 0a67 	vmov.f32	s1, s15
 800065c:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800067c <main+0x178>
 8000660:	4808      	ldr	r0, [pc, #32]	@ (8000684 <main+0x180>)
 8000662:	f000 fcbb 	bl	8000fdc <PID_Update>
		PID_Update(&PID2, 0, tempReadings[2]);
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <main+0x19c>)
 8000668:	edd3 7a02 	vldr	s15, [r3, #8]
 800066c:	eef0 0a67 	vmov.f32	s1, s15
 8000670:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800067c <main+0x178>
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <main+0x184>)
 8000676:	f000 fcb1 	bl	8000fdc <PID_Update>
	if (timers_isr & 0x01) {
 800067a:	e7b0      	b.n	80005de <main+0xda>
 800067c:	00000000 	.word	0x00000000
 8000680:	200001ac 	.word	0x200001ac
 8000684:	200001e4 	.word	0x200001e4
 8000688:	2000021c 	.word	0x2000021c
 800068c:	2000007c 	.word	0x2000007c
 8000690:	20000264 	.word	0x20000264
 8000694:	20000164 	.word	0x20000164
 8000698:	2000011c 	.word	0x2000011c
 800069c:	20000254 	.word	0x20000254
 80006a0:	20000258 	.word	0x20000258

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	@ 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	@ 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f003 fcb8 	bl	8004028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <SystemClock_Config+0xc8>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a26      	ldr	r2, [pc, #152]	@ (800076c <SystemClock_Config+0xc8>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b24      	ldr	r3, [pc, #144]	@ (800076c <SystemClock_Config+0xc8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b21      	ldr	r3, [pc, #132]	@ (8000770 <SystemClock_Config+0xcc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a20      	ldr	r2, [pc, #128]	@ (8000770 <SystemClock_Config+0xcc>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <SystemClock_Config+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000714:	2308      	movs	r3, #8
 8000716:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000718:	2364      	movs	r3, #100	@ 0x64
 800071a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f001 fb91 	bl	8001e50 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000734:	f000 fa54 	bl	8000be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2103      	movs	r1, #3
 8000754:	4618      	mov	r0, r3
 8000756:	f001 fdf3 	bl	8002340 <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000760:	f000 fa3e 	bl	8000be0 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	@ 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	@ (80007c8 <MX_I2C1_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800077e:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000780:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_I2C1_Init+0x58>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <MX_I2C1_Init+0x50>)
 8000792:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	@ (80007c4 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_I2C1_Init+0x50>)
 80007b2:	f001 fa09 	bl	8001bc8 <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 fa10 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000028 	.word	0x20000028
 80007c8:	40005400 	.word	0x40005400
 80007cc:	000186a0 	.word	0x000186a0

080007d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007d6:	4a19      	ldr	r2, [pc, #100]	@ (800083c <MX_SPI1_Init+0x6c>)
 80007d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007e8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ea:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007f0:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <MX_SPI1_Init+0x68>)
 80007fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000802:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000804:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_SPI1_Init+0x68>)
 8000806:	2238      	movs	r2, #56	@ 0x38
 8000808:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800080a:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <MX_SPI1_Init+0x68>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000810:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_SPI1_Init+0x68>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000816:	4b08      	ldr	r3, [pc, #32]	@ (8000838 <MX_SPI1_Init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_SPI1_Init+0x68>)
 800081e:	220a      	movs	r2, #10
 8000820:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_SPI1_Init+0x68>)
 8000824:	f001 ff58 	bl	80026d8 <HAL_SPI_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800082e:	f000 f9d7 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	2000007c 	.word	0x2000007c
 800083c:	40013000 	.word	0x40013000

08000840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_TIM1_Init+0x70>)
 8000850:	4a18      	ldr	r2, [pc, #96]	@ (80008b4 <MX_TIM1_Init+0x74>)
 8000852:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_TIM1_Init+0x70>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_TIM1_Init+0x70>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000860:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_TIM1_Init+0x70>)
 8000862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000866:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_TIM1_Init+0x70>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_TIM1_Init+0x70>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_TIM1_Init+0x70>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 800087a:	2108      	movs	r1, #8
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <MX_TIM1_Init+0x70>)
 800087e:	f002 fcc4 	bl	800320a <HAL_TIM_OnePulse_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8000888:	f000 f9aa 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000894:	463b      	mov	r3, r7
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_TIM1_Init+0x70>)
 800089a:	f003 fb43 	bl	8003f24 <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80008a4:	f000 f99c 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200000d4 	.word	0x200000d4
 80008b4:	40010000 	.word	0x40010000

080008b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b092      	sub	sp, #72	@ 0x48
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]
 80008f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f8:	4b3f      	ldr	r3, [pc, #252]	@ (80009f8 <MX_TIM2_Init+0x140>)
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000900:	4b3d      	ldr	r3, [pc, #244]	@ (80009f8 <MX_TIM2_Init+0x140>)
 8000902:	2263      	movs	r2, #99	@ 0x63
 8000904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b3c      	ldr	r3, [pc, #240]	@ (80009f8 <MX_TIM2_Init+0x140>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8300-1;
 800090c:	4b3a      	ldr	r3, [pc, #232]	@ (80009f8 <MX_TIM2_Init+0x140>)
 800090e:	f242 026b 	movw	r2, #8299	@ 0x206b
 8000912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b38      	ldr	r3, [pc, #224]	@ (80009f8 <MX_TIM2_Init+0x140>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800091a:	4b37      	ldr	r3, [pc, #220]	@ (80009f8 <MX_TIM2_Init+0x140>)
 800091c:	2280      	movs	r2, #128	@ 0x80
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000920:	4835      	ldr	r0, [pc, #212]	@ (80009f8 <MX_TIM2_Init+0x140>)
 8000922:	f002 fb67 	bl	8002ff4 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800092c:	f000 f958 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000934:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800093a:	4619      	mov	r1, r3
 800093c:	482e      	ldr	r0, [pc, #184]	@ (80009f8 <MX_TIM2_Init+0x140>)
 800093e:	f002 fe57 	bl	80035f0 <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000948:	f000 f94a 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800094c:	482a      	ldr	r0, [pc, #168]	@ (80009f8 <MX_TIM2_Init+0x140>)
 800094e:	f002 fc03 	bl	8003158 <HAL_TIM_OC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000958:	f000 f942 	bl	8000be0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 800095c:	2108      	movs	r1, #8
 800095e:	4826      	ldr	r0, [pc, #152]	@ (80009f8 <MX_TIM2_Init+0x140>)
 8000960:	f002 fc53 	bl	800320a <HAL_TIM_OnePulse_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800096a:	f000 f939 	bl	8000be0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800096e:	2306      	movs	r3, #6
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000972:	2360      	movs	r3, #96	@ 0x60
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.TriggerFilter = 15;
 800097a:	230f      	movs	r3, #15
 800097c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800097e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	481c      	ldr	r0, [pc, #112]	@ (80009f8 <MX_TIM2_Init+0x140>)
 8000986:	f002 fefa 	bl	800377e <HAL_TIM_SlaveConfigSynchro>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000990:	f000 f926 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4815      	ldr	r0, [pc, #84]	@ (80009f8 <MX_TIM2_Init+0x140>)
 80009a4:	f003 fabe 	bl	8003f24 <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80009ae:	f000 f917 	bl	8000be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80009b2:	2370      	movs	r3, #112	@ 0x70
 80009b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8000;
 80009b6:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80009ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009bc:	2302      	movs	r3, #2
 80009be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <MX_TIM2_Init+0x140>)
 80009cc:	f002 fdb4 	bl	8003538 <HAL_TIM_OC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 80009d6:	f000 f903 	bl	8000be0 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80009da:	4b07      	ldr	r3, [pc, #28]	@ (80009f8 <MX_TIM2_Init+0x140>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	699a      	ldr	r2, [r3, #24]
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <MX_TIM2_Init+0x140>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f042 0208 	orr.w	r2, r2, #8
 80009e8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */
  // !!!  sConfigOC.OCMode = TIM_OCMODE_PWM2;
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009ea:	4803      	ldr	r0, [pc, #12]	@ (80009f8 <MX_TIM2_Init+0x140>)
 80009ec:	f000 fcf8 	bl	80013e0 <HAL_TIM_MspPostInit>

}
 80009f0:	bf00      	nop
 80009f2:	3748      	adds	r7, #72	@ 0x48
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000011c 	.word	0x2000011c

080009fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a10:	463b      	mov	r3, r7
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	@ (8000a90 <MX_TIM3_Init+0x94>)
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a94 <MX_TIM3_Init+0x98>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <MX_TIM3_Init+0x94>)
 8000a20:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	@ (8000a90 <MX_TIM3_Init+0x94>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500-1;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <MX_TIM3_Init+0x94>)
 8000a2e:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000a32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a34:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <MX_TIM3_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_TIM3_Init+0x94>)
 8000a3c:	2280      	movs	r2, #128	@ 0x80
 8000a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a40:	4813      	ldr	r0, [pc, #76]	@ (8000a90 <MX_TIM3_Init+0x94>)
 8000a42:	f002 fad7 	bl	8002ff4 <HAL_TIM_Base_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a4c:	f000 f8c8 	bl	8000be0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	@ (8000a90 <MX_TIM3_Init+0x94>)
 8000a5e:	f002 fdc7 	bl	80035f0 <HAL_TIM_ConfigClockSource>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a68:	f000 f8ba 	bl	8000be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	@ (8000a90 <MX_TIM3_Init+0x94>)
 8000a7a:	f003 fa53 	bl	8003f24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a84:	f000 f8ac 	bl	8000be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000164 	.word	0x20000164
 8000a94:	40000400 	.word	0x40000400

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b3a      	ldr	r3, [pc, #232]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	4a39      	ldr	r2, [pc, #228]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abe:	4b37      	ldr	r3, [pc, #220]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	4a32      	ldr	r2, [pc, #200]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ada:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a2b      	ldr	r2, [pc, #172]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b25      	ldr	r3, [pc, #148]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a24      	ldr	r2, [pc, #144]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b22      	ldr	r3, [pc, #136]	@ (8000b9c <MX_GPIO_Init+0x104>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0302 	and.w	r3, r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(built_in_led_GPIO_Port, built_in_led_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b24:	481e      	ldr	r0, [pc, #120]	@ (8000ba0 <MX_GPIO_Init+0x108>)
 8000b26:	f001 f835 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2180      	movs	r1, #128	@ 0x80
 8000b2e:	481d      	ldr	r0, [pc, #116]	@ (8000ba4 <MX_GPIO_Init+0x10c>)
 8000b30:	f001 f830 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_1_Pin|CS_2_Pin|CS_3_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2107      	movs	r1, #7
 8000b38:	481b      	ldr	r0, [pc, #108]	@ (8000ba8 <MX_GPIO_Init+0x110>)
 8000b3a:	f001 f82b 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : built_in_led_Pin */
  GPIO_InitStruct.Pin = built_in_led_Pin;
 8000b3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(built_in_led_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4812      	ldr	r0, [pc, #72]	@ (8000ba0 <MX_GPIO_Init+0x108>)
 8000b58:	f000 fe98 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_0_Pin */
  GPIO_InitStruct.Pin = CS_0_Pin;
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_0_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <MX_GPIO_Init+0x10c>)
 8000b74:	f000 fe8a 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_1_Pin CS_2_Pin CS_3_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin|CS_2_Pin|CS_3_Pin;
 8000b78:	2307      	movs	r3, #7
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	@ (8000ba8 <MX_GPIO_Init+0x110>)
 8000b90:	f000 fe7c 	bl	800188c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020800 	.word	0x40020800
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40020400 	.word	0x40020400

08000bac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ISR
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4a08      	ldr	r2, [pc, #32]	@ (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d106      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x1e>
		timers_isr |= 0x01;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000bc8:	701a      	strb	r2, [r3, #0]
	}
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000164 	.word	0x20000164
 8000bdc:	20000254 	.word	0x20000254

08000be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <Error_Handler+0x8>

08000bec <MAX6675_Init>:
 * @param driver Pointer to driver control structure
 * @param hspi   Pointer to the SPI handle for communication
 * @return HAL_StatusTypeDef HAL_OK if successful, HAL_ERROR otherwise
 */
HAL_StatusTypeDef MAX6675_Init(MAX6675_Driver_t *driver, SPI_HandleTypeDef *hspi)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b08b      	sub	sp, #44	@ 0x2c
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
    /* Validate input parameters */
    if (driver == NULL || hspi == NULL) {
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d002      	beq.n	8000c02 <MAX6675_Init+0x16>
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d101      	bne.n	8000c06 <MAX6675_Init+0x1a>
        return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e04b      	b.n	8000c9e <MAX6675_Init+0xb2>
    }

    /* Initialize driver structure */
    driver->hspi = hspi;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	635a      	str	r2, [r3, #52]	@ 0x34
    driver->device_count = 0;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Define CS port array */
    GPIO_TypeDef* cs_ports[] = MAX6675_CS_PORTS;
 8000c14:	4b24      	ldr	r3, [pc, #144]	@ (8000ca8 <MAX6675_Init+0xbc>)
 8000c16:	f107 0414 	add.w	r4, r7, #20
 8000c1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t cs_pins[] = MAX6675_CS_PINS;
 8000c20:	4a22      	ldr	r2, [pc, #136]	@ (8000cac <MAX6675_Init+0xc0>)
 8000c22:	f107 030c 	add.w	r3, r7, #12
 8000c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c2a:	e883 0003 	stmia.w	r3, {r0, r1}

    /* Copy CS port/pin information to driver structure */
    for (uint8_t i = 0; i < MAX6675_MAX_DEVICES; i++) {
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c34:	e02e      	b.n	8000c94 <MAX6675_Init+0xa8>
        driver->cs_ports[i] = cs_ports[i];
 8000c36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c3a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	3328      	adds	r3, #40	@ 0x28
 8000c42:	443b      	add	r3, r7
 8000c44:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	320e      	adds	r2, #14
 8000c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        driver->cs_pins[i] = cs_pins[i];
 8000c50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c54:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	3328      	adds	r3, #40	@ 0x28
 8000c5c:	443b      	add	r3, r7
 8000c5e:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3224      	adds	r2, #36	@ 0x24
 8000c66:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        /* Set all CS pins high (inactive) */
        HAL_GPIO_WritePin(driver->cs_ports[i], driver->cs_pins[i], GPIO_PIN_SET);
 8000c6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	320e      	adds	r2, #14
 8000c72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000c76:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3224      	adds	r2, #36	@ 0x24
 8000c7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c82:	2201      	movs	r2, #1
 8000c84:	4619      	mov	r1, r3
 8000c86:	f000 ff85 	bl	8001b94 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < MAX6675_MAX_DEVICES; i++) {
 8000c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c8e:	3301      	adds	r3, #1
 8000c90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000c94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d9cc      	bls.n	8000c36 <MAX6675_Init+0x4a>
    }

    return HAL_OK;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	372c      	adds	r7, #44	@ 0x2c
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd90      	pop	{r4, r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08004098 	.word	0x08004098
 8000cac:	080040a8 	.word	0x080040a8

08000cb0 <MAX6675_AddDevice>:
 * @param driver    Pointer to driver control structure
 * @param device_id Device ID (0-3) corresponding to CS pin index
 * @return HAL_StatusTypeDef HAL_OK if successful, HAL_ERROR otherwise
 */
HAL_StatusTypeDef MAX6675_AddDevice(MAX6675_Driver_t *driver, uint8_t device_id)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
    /* Validate input parameters */
    if (driver == NULL || device_id >= MAX6675_MAX_DEVICES) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <MAX6675_AddDevice+0x18>
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	2b03      	cmp	r3, #3
 8000cc6:	d901      	bls.n	8000ccc <MAX6675_AddDevice+0x1c>
        return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e03c      	b.n	8000d46 <MAX6675_AddDevice+0x96>
    }

    /* Check if we have room for more devices */
    if (driver->device_count >= MAX6675_MAX_DEVICES) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000cd2:	2b03      	cmp	r3, #3
 8000cd4:	d901      	bls.n	8000cda <MAX6675_AddDevice+0x2a>
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e035      	b.n	8000d46 <MAX6675_AddDevice+0x96>
    }

    /* Initialize device structure */
    driver->devices[device_id].id = device_id;
 8000cda:	78fa      	ldrb	r2, [r7, #3]
 8000cdc:	6879      	ldr	r1, [r7, #4]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	4413      	add	r3, r2
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	78fa      	ldrb	r2, [r7, #3]
 8000cea:	701a      	strb	r2, [r3, #0]
    driver->devices[device_id].raw_data = 0;
 8000cec:	78fa      	ldrb	r2, [r7, #3]
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	440b      	add	r3, r1
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	801a      	strh	r2, [r3, #0]
    driver->devices[device_id].temperature = 0.0f;
 8000d00:	78fa      	ldrb	r2, [r7, #3]
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	3304      	adds	r3, #4
 8000d10:	f04f 0200 	mov.w	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
    driver->devices[device_id].is_connected = 0;
 8000d16:	78fa      	ldrb	r2, [r7, #3]
 8000d18:	6879      	ldr	r1, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	3308      	adds	r3, #8
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]

    /* Increment device count */
    driver->device_count++;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d30:	3301      	adds	r3, #1
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Validate device communication by reading temperature */
    return MAX6675_ReadTemperature(driver, device_id);
 8000d3a:	78fb      	ldrb	r3, [r7, #3]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f000 f806 	bl	8000d50 <MAX6675_ReadTemperature>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <MAX6675_ReadTemperature>:
 * @param driver    Pointer to driver control structure
 * @param device_id Device ID (0-3) to read from
 * @return HAL_StatusTypeDef HAL_OK if successful, HAL_ERROR otherwise
 */
HAL_StatusTypeDef MAX6675_ReadTemperature(MAX6675_Driver_t *driver, uint8_t device_id)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	73fb      	strb	r3, [r7, #15]
    uint16_t raw_temp = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	81bb      	strh	r3, [r7, #12]
    uint8_t data[2] = {0};  /* Buffer for raw data from MAX6675 */
 8000d64:	2300      	movs	r3, #0
 8000d66:	813b      	strh	r3, [r7, #8]

    /* Validate input parameters */
    if (driver == NULL || device_id >= MAX6675_MAX_DEVICES) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d002      	beq.n	8000d74 <MAX6675_ReadTemperature+0x24>
 8000d6e:	78fb      	ldrb	r3, [r7, #3]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d901      	bls.n	8000d78 <MAX6675_ReadTemperature+0x28>
        return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e0ae      	b.n	8000ed6 <MAX6675_ReadTemperature+0x186>
    }

    /* Begin SPI communication sequence */
    HAL_GPIO_WritePin(
 8000d78:	78fa      	ldrb	r2, [r7, #3]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	320e      	adds	r2, #14
 8000d7e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000d82:	78fa      	ldrb	r2, [r7, #3]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3224      	adds	r2, #36	@ 0x24
 8000d88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f000 ff00 	bl	8001b94 <HAL_GPIO_WritePin>
        driver->cs_pins[device_id],
        GPIO_PIN_RESET
    ); /* Assert CS (active low) */

    /* Read (16 bits) from the MAX6675 */
    status = HAL_SPI_Receive(driver->hspi, data, 1, 50);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8000d98:	f107 0108 	add.w	r1, r7, #8
 8000d9c:	2332      	movs	r3, #50	@ 0x32
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f001 fd23 	bl	80027ea <HAL_SPI_Receive>
 8000da4:	4603      	mov	r3, r0
 8000da6:	73fb      	strb	r3, [r7, #15]

    /* End SPI communication sequence */
    HAL_GPIO_WritePin(
 8000da8:	78fa      	ldrb	r2, [r7, #3]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	320e      	adds	r2, #14
 8000dae:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000db2:	78fa      	ldrb	r2, [r7, #3]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3224      	adds	r2, #36	@ 0x24
 8000db8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f000 fee8 	bl	8001b94 <HAL_GPIO_WritePin>
        driver->cs_pins[device_id],
        GPIO_PIN_SET
    ); /* Deassert CS */

    /* Check if SPI communication was successful */
    if (status != HAL_OK) {
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00b      	beq.n	8000de2 <MAX6675_ReadTemperature+0x92>
        driver->devices[device_id].is_connected = 0;
 8000dca:	78fa      	ldrb	r2, [r7, #3]
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3308      	adds	r3, #8
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
        return status;
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	e079      	b.n	8000ed6 <MAX6675_ReadTemperature+0x186>
    }

    /* Combine the two bytes into a 16-bit value */
    driver->devices[device_id].raw_data = (data[1] << 8) | data[0];
 8000de2:	7a7b      	ldrb	r3, [r7, #9]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	021b      	lsls	r3, r3, #8
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	7a3b      	ldrb	r3, [r7, #8]
 8000dec:	b21b      	sxth	r3, r3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	78fa      	ldrb	r2, [r7, #3]
 8000df4:	b298      	uxth	r0, r3
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	3302      	adds	r3, #2
 8000e04:	4602      	mov	r2, r0
 8000e06:	801a      	strh	r2, [r3, #0]
     * Verify device integrity by checking:
     * 1. Thermocouple input bit (should be 0 if connected)
     * 2. Dummy bit (should be 0 for proper operation)
     * 3. Full zeros??? ambient's temperature is present
     */
    if ((((driver->devices[device_id].raw_data & MAX6675_INPUT_BIT) >> 2) ==
 8000e08:	78fa      	ldrb	r2, [r7, #3]
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	3302      	adds	r3, #2
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	109b      	asrs	r3, r3, #2
 8000e1c:	f003 0101 	and.w	r1, r3, #1
        ((driver->devices[device_id].raw_data & MAX6675_DUMMY_BIT) >> 15)) &&
 8000e20:	78fa      	ldrb	r2, [r7, #3]
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4403      	add	r3, r0
 8000e2e:	3302      	adds	r3, #2
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	0bdb      	lsrs	r3, r3, #15
 8000e34:	b29b      	uxth	r3, r3
    if ((((driver->devices[device_id].raw_data & MAX6675_INPUT_BIT) >> 2) ==
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d136      	bne.n	8000ea8 <MAX6675_ReadTemperature+0x158>
        (driver->devices[device_id].raw_data != 0x0000)) {
 8000e3a:	78fa      	ldrb	r2, [r7, #3]
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	3302      	adds	r3, #2
 8000e4a:	881b      	ldrh	r3, [r3, #0]
        ((driver->devices[device_id].raw_data & MAX6675_DUMMY_BIT) >> 15)) &&
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d02b      	beq.n	8000ea8 <MAX6675_ReadTemperature+0x158>

        /* Extract temperature data (12-bit value shifted right by 3) */
        raw_temp = (driver->devices[device_id].raw_data & MAX6675_TEMP_BITS) >> 3;
 8000e50:	78fa      	ldrb	r2, [r7, #3]
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	3302      	adds	r3, #2
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	10db      	asrs	r3, r3, #3
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e6a:	81bb      	strh	r3, [r7, #12]

        /* Convert to Celsius (0.25°C per count) */
        driver->devices[device_id].temperature = raw_temp * MAX6675_TEMP_FACTOR;
 8000e6c:	89bb      	ldrh	r3, [r7, #12]
 8000e6e:	ee07 3a90 	vmov	s15, r3
 8000e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e76:	78fa      	ldrb	r2, [r7, #3]
 8000e78:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8000e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	edc3 7a00 	vstr	s15, [r3]
        driver->devices[device_id].is_connected = 1;
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4613      	mov	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	3308      	adds	r3, #8
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e015      	b.n	8000ed4 <MAX6675_ReadTemperature+0x184>
    } else {
        /* No thermocouple detected or communication error */
        driver->devices[device_id].temperature = -404.0;
 8000ea8:	78fa      	ldrb	r2, [r7, #3]
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	4a09      	ldr	r2, [pc, #36]	@ (8000ee0 <MAX6675_ReadTemperature+0x190>)
 8000eba:	601a      	str	r2, [r3, #0]
        driver->devices[device_id].is_connected = 0;
 8000ebc:	78fa      	ldrb	r2, [r7, #3]
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	4413      	add	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	3308      	adds	r3, #8
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
        status = HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	73fb      	strb	r3, [r7, #15]
    }

    return status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	c3ca0000 	.word	0xc3ca0000

08000ee4 <MAX6675_GetTemperature>:
 * @param device_id   Device ID (0-3) to get temperature from
 * @param temperature Pointer to store the temperature value
 * @return HAL_StatusTypeDef HAL_OK if successful, HAL_ERROR otherwise
 */
HAL_StatusTypeDef MAX6675_GetTemperature(MAX6675_Driver_t *driver, uint8_t device_id, float *temperature)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	460b      	mov	r3, r1
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	72fb      	strb	r3, [r7, #11]
    /* Validate input parameters */
    if (driver == NULL || device_id >= MAX6675_MAX_DEVICES || temperature == NULL) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <MAX6675_GetTemperature+0x20>
 8000ef8:	7afb      	ldrb	r3, [r7, #11]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d802      	bhi.n	8000f04 <MAX6675_GetTemperature+0x20>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <MAX6675_GetTemperature+0x24>
        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e018      	b.n	8000f3a <MAX6675_GetTemperature+0x56>
    }

    /* Check if device is connected */
    if (!driver->devices[device_id].is_connected) {
 8000f08:	7afa      	ldrb	r2, [r7, #11]
 8000f0a:	68f9      	ldr	r1, [r7, #12]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	3308      	adds	r3, #8
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <MAX6675_GetTemperature+0x3e>
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00b      	b.n	8000f3a <MAX6675_GetTemperature+0x56>
    }

    /* Get temperature value */
    *temperature = driver->devices[device_id].temperature;
 8000f22:	7afa      	ldrb	r2, [r7, #11]
 8000f24:	68f9      	ldr	r1, [r7, #12]
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	3304      	adds	r3, #4
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <PID_Init>:
void PID_Init(PIDController* pid, float kp, float ki, float kd,
              float tau,
              float limMin, float limMax,
              float limMinInt, float limMaxInt,
              float t)
{
 8000f46:	b480      	push	{r7}
 8000f48:	b08b      	sub	sp, #44	@ 0x2c
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8000f4e:	ed87 0a08 	vstr	s0, [r7, #32]
 8000f52:	edc7 0a07 	vstr	s1, [r7, #28]
 8000f56:	ed87 1a06 	vstr	s2, [r7, #24]
 8000f5a:	edc7 1a05 	vstr	s3, [r7, #20]
 8000f5e:	ed87 2a04 	vstr	s4, [r7, #16]
 8000f62:	edc7 2a03 	vstr	s5, [r7, #12]
 8000f66:	ed87 3a02 	vstr	s6, [r7, #8]
 8000f6a:	edc7 3a01 	vstr	s7, [r7, #4]
 8000f6e:	ed87 4a00 	vstr	s8, [r7]
    // Initialize PID gains (proportional, integral, derivative)
    pid->Kp = kp;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f74:	6a3a      	ldr	r2, [r7, #32]
 8000f76:	601a      	str	r2, [r3, #0]
    pid->Ki = ki;
 8000f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	605a      	str	r2, [r3, #4]
    pid->Kd = kd;
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	609a      	str	r2, [r3, #8]

    // Low-pass filter time constant (for the derivative)
    pid->tau = tau;
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	60da      	str	r2, [r3, #12]

    // Controller output limits
    pid->limMin = limMin;
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	611a      	str	r2, [r3, #16]
    pid->limMax = limMax;
 8000f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	615a      	str	r2, [r3, #20]

    // Integrator limits (wind-up prevention)
    pid->limMinInt = limMinInt;
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	619a      	str	r2, [r3, #24]
    pid->limMaxInt = limMaxInt;
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	61da      	str	r2, [r3, #28]

    // Sampling time (time interval between updates)
    pid->T = t;
 8000fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	621a      	str	r2, [r3, #32]

    // Initialize integrator (accumulates error)
    pid->integrator = 0.0f;
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	@ 0x24

    // Initialize previous error (for derivative calculation)
    pid->prevError = 0.0f;
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	629a      	str	r2, [r3, #40]	@ 0x28

    // Initialize differentiator (for derivative term)
    pid->differentiator = 0.0f;
 8000fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Initialize previous measurement (for derivative calculation)
    pid->prevMeasurement = 0.0f;
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize controller output
    pid->out = 0.0f;
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000fd0:	bf00      	nop
 8000fd2:	372c      	adds	r7, #44	@ 0x2c
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <PID_Update>:
    pid->out = 0.0f;             // Reset output
}

// Function that updates the PID controller each time it is called
float PID_Update(PIDController* pid, float setpoint, float measurement)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fe8:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate error (difference between setpoint and measurement)
    float error = setpoint - measurement;
 8000fec:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff8:	edc7 7a05 	vstr	s15, [r7, #20]

    // Calculate proportional term (Kp * error)
    float proportional = pid->Kp * error;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	edd3 7a00 	vldr	s15, [r3]
 8001002:	ed97 7a05 	vldr	s14, [r7, #20]
 8001006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Calculate integral term (integration of error)
    pid->integrator += 0.5f * pid->Ki * pid->T * (error + pid->prevError); // Trapezoidal integration method (average sum of errors)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	edd3 7a01 	vldr	s15, [r3, #4]
 800101a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800101e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	edd3 7a08 	vldr	s15, [r3, #32]
 8001028:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 8001032:	edd7 7a05 	vldr	s15, [r7, #20]
 8001036:	ee76 7a27 	vadd.f32	s15, s12, s15
 800103a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800103e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Anti-windup: Limit the integrator value to prevent excessive error accumulation
    if (pid->integrator > pid->limMaxInt)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	edd3 7a07 	vldr	s15, [r3, #28]
 8001054:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	dd04      	ble.n	8001068 <PID_Update+0x8c>
    {
        pid->integrator = pid->limMaxInt; // Limit integrator to maximum allowed value
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	69da      	ldr	r2, [r3, #28]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	625a      	str	r2, [r3, #36]	@ 0x24
 8001066:	e00e      	b.n	8001086 <PID_Update+0xaa>
    }
    else if (pid->integrator < pid->limMinInt)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	edd3 7a06 	vldr	s15, [r3, #24]
 8001074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107c:	d503      	bpl.n	8001086 <PID_Update+0xaa>
    {
        pid->integrator = pid->limMinInt; // Limit integrator to minimum allowed value
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    // Calculate derivative term (with low-pass filter to avoid noise)
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) +
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	edd3 7a02 	vldr	s15, [r3, #8]
 800108c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001096:	edd7 6a01 	vldr	s13, [r7, #4]
 800109a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800109e:	ee27 7a27 	vmul.f32	s14, s14, s15
                         (2.0f * pid->tau - pid->T) * pid->differentiator) /
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80010a8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80010b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80010bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) +
 80010c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c4:	eef1 6a67 	vneg.f32	s13, s15
                         (2.0f * pid->tau + pid->T);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80010ce:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	edd3 7a08 	vldr	s15, [r3, #32]
 80010d8:	ee37 7a27 	vadd.f32	s14, s14, s15
                         (2.0f * pid->tau - pid->T) * pid->differentiator) /
 80010dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) +
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate total controller output (Sum of proportional, integral, and derivative)
    pid->out = proportional + pid->integrator + pid->differentiator;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80010ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80010f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    // Apply limits to the output (controller output must be within defined limits)
    if (pid->out > pid->limMax)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001110:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	dd04      	ble.n	8001124 <PID_Update+0x148>
    {
        pid->out = pid->limMax; // Limit output to maximum
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	695a      	ldr	r2, [r3, #20]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	635a      	str	r2, [r3, #52]	@ 0x34
 8001122:	e00e      	b.n	8001142 <PID_Update+0x166>
    }
    else if (pid->out < pid->limMin)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	d503      	bpl.n	8001142 <PID_Update+0x166>
    {
        pid->out = pid->limMin; // Limit output to minimum
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	691a      	ldr	r2, [r3, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Update controller memory (errors and previous measurements for the next cycle)
    pid->prevError = error;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->prevMeasurement = measurement;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	631a      	str	r2, [r3, #48]	@ 0x30

    // Return controller output (how much the controlled variable should be adjusted)
    return pid->out;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001152:	ee07 3a90 	vmov	s15, r3
}
 8001156:	eeb0 0a67 	vmov.f32	s0, s15
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	4a0f      	ldr	r2, [pc, #60]	@ (80011b0 <HAL_MspInit+0x4c>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001178:	6453      	str	r3, [r2, #68]	@ 0x44
 800117a:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	603b      	str	r3, [r7, #0]
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <HAL_MspInit+0x4c>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001194:	6413      	str	r3, [r2, #64]	@ 0x40
 8001196:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <HAL_I2C_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12b      	bne.n	800122e <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_I2C_MspInit+0x88>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a17      	ldr	r2, [pc, #92]	@ (800123c <HAL_I2C_MspInit+0x88>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_I2C_MspInit+0x88>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f2:	23c0      	movs	r3, #192	@ 0xc0
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f6:	2312      	movs	r3, #18
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001202:	2304      	movs	r3, #4
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <HAL_I2C_MspInit+0x8c>)
 800120e:	f000 fb3d 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <HAL_I2C_MspInit+0x88>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	4a08      	ldr	r2, [pc, #32]	@ (800123c <HAL_I2C_MspInit+0x88>)
 800121c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001220:	6413      	str	r3, [r2, #64]	@ 0x40
 8001222:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_I2C_MspInit+0x88>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800122e:	bf00      	nop
 8001230:	3728      	adds	r7, #40	@ 0x28
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40005400 	.word	0x40005400
 800123c:	40023800 	.word	0x40023800
 8001240:	40020400 	.word	0x40020400

08001244 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a19      	ldr	r2, [pc, #100]	@ (80012c8 <HAL_SPI_MspInit+0x84>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d12b      	bne.n	80012be <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <HAL_SPI_MspInit+0x88>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126e:	4a17      	ldr	r2, [pc, #92]	@ (80012cc <HAL_SPI_MspInit+0x88>)
 8001270:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001274:	6453      	str	r3, [r2, #68]	@ 0x44
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <HAL_SPI_MspInit+0x88>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <HAL_SPI_MspInit+0x88>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	4a10      	ldr	r2, [pc, #64]	@ (80012cc <HAL_SPI_MspInit+0x88>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	@ 0x30
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <HAL_SPI_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800129e:	2360      	movs	r3, #96	@ 0x60
 80012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012ae:	2305      	movs	r3, #5
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <HAL_SPI_MspInit+0x8c>)
 80012ba:	f000 fae7 	bl	800188c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	@ 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40013000 	.word	0x40013000
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000

080012d4 <HAL_TIM_OnePulse_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_onepulse: TIM_OnePulse handle pointer
  * @retval None
  */
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <HAL_TIM_OnePulse_MspInit+0x3c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10d      	bne.n	8001302 <HAL_TIM_OnePulse_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_TIM_OnePulse_MspInit+0x40>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	4a09      	ldr	r2, [pc, #36]	@ (8001314 <HAL_TIM_OnePulse_MspInit+0x40>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f6:	4b07      	ldr	r3, [pc, #28]	@ (8001314 <HAL_TIM_OnePulse_MspInit+0x40>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40010000 	.word	0x40010000
 8001314:	40023800 	.word	0x40023800

08001318 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	@ 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001338:	d12c      	bne.n	8001394 <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	4b25      	ldr	r3, [pc, #148]	@ (80013d4 <HAL_TIM_Base_MspInit+0xbc>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a24      	ldr	r2, [pc, #144]	@ (80013d4 <HAL_TIM_Base_MspInit+0xbc>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b22      	ldr	r3, [pc, #136]	@ (80013d4 <HAL_TIM_Base_MspInit+0xbc>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <HAL_TIM_Base_MspInit+0xbc>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a1d      	ldr	r2, [pc, #116]	@ (80013d4 <HAL_TIM_Base_MspInit+0xbc>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b1b      	ldr	r3, [pc, #108]	@ (80013d4 <HAL_TIM_Base_MspInit+0xbc>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = zero_crossig_Pin;
 8001372:	2302      	movs	r3, #2
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001376:	2302      	movs	r3, #2
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001382:	2301      	movs	r3, #1
 8001384:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(zero_crossig_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4812      	ldr	r0, [pc, #72]	@ (80013d8 <HAL_TIM_Base_MspInit+0xc0>)
 800138e:	f000 fa7d 	bl	800188c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001392:	e01a      	b.n	80013ca <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a10      	ldr	r2, [pc, #64]	@ (80013dc <HAL_TIM_Base_MspInit+0xc4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d115      	bne.n	80013ca <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <HAL_TIM_Base_MspInit+0xbc>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a0b      	ldr	r2, [pc, #44]	@ (80013d4 <HAL_TIM_Base_MspInit+0xbc>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_TIM_Base_MspInit+0xbc>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	201d      	movs	r0, #29
 80013c0:	f000 fa2d 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013c4:	201d      	movs	r0, #29
 80013c6:	f000 fa46 	bl	8001856 <HAL_NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	@ 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020000 	.word	0x40020000
 80013dc:	40000400 	.word	0x40000400

080013e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001400:	d11d      	bne.n	800143e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_TIM_MspPostInit+0x68>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a0f      	ldr	r2, [pc, #60]	@ (8001448 <HAL_TIM_MspPostInit+0x68>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b0d      	ldr	r3, [pc, #52]	@ (8001448 <HAL_TIM_MspPostInit+0x68>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = fire_Pin;
 800141e:	2301      	movs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fire_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	4619      	mov	r1, r3
 8001438:	4804      	ldr	r0, [pc, #16]	@ (800144c <HAL_TIM_MspPostInit+0x6c>)
 800143a:	f000 fa27 	bl	800188c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40020000 	.word	0x40020000

08001450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <NMI_Handler+0x4>

08001458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <HardFault_Handler+0x4>

08001460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <MemManage_Handler+0x4>

08001468 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <BusFault_Handler+0x4>

08001470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <UsageFault_Handler+0x4>

08001478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a6:	f000 f89b 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <TIM3_IRQHandler+0x10>)
 80014b6:	f001 ff4f 	bl	8003358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000164 	.word	0x20000164

080014c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001520 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ec:	f7ff ffea 	bl	80014c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	@ (8001524 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	@ (8001528 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	@ (800152c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	@ (8001534 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f002 fd8f 	bl	8004038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151a:	f7fe fff3 	bl	8000504 <main>
  bx  lr    
 800151e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001520:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800152c:	080040d8 	.word	0x080040d8
  ldr r2, =_sbss
 8001530:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001534:	200002b8 	.word	0x200002b8

08001538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC_IRQHandler>
	...

0800153c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001540:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <HAL_Init+0x40>)
 8001546:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800154c:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <HAL_Init+0x40>)
 8001552:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <HAL_Init+0x40>)
 800155e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 f94f 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	200f      	movs	r0, #15
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fdf8 	bl	8001164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 f967 	bl	8001872 <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015bc:	f000 f92f 	bl	800181e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008
 8001604:	200002b4 	.word	0x200002b4

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200002b4 	.word	0x200002b4

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	@ (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	@ (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	@ (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	@ 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	@ (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	@ (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff29 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff3e 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff31 	bl	80016cc <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	@ 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e159      	b.n	8001b5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8148 	bne.w	8001b56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d130      	bne.n	8001940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a2 	beq.w	8001b56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b57      	ldr	r3, [pc, #348]	@ (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a1a:	4a56      	ldr	r2, [pc, #344]	@ (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a22:	4b54      	ldr	r3, [pc, #336]	@ (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a52      	ldr	r2, [pc, #328]	@ (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a49      	ldr	r2, [pc, #292]	@ (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d019      	beq.n	8001a8e <HAL_GPIO_Init+0x202>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a48      	ldr	r2, [pc, #288]	@ (8001b80 <HAL_GPIO_Init+0x2f4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0x1fe>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a47      	ldr	r2, [pc, #284]	@ (8001b84 <HAL_GPIO_Init+0x2f8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_GPIO_Init+0x1fa>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a46      	ldr	r2, [pc, #280]	@ (8001b88 <HAL_GPIO_Init+0x2fc>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0x1f6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a45      	ldr	r2, [pc, #276]	@ (8001b8c <HAL_GPIO_Init+0x300>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_GPIO_Init+0x1f2>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	@ (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b38      	ldr	r3, [pc, #224]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001afc:	4a24      	ldr	r2, [pc, #144]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b02:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b26:	4a1a      	ldr	r2, [pc, #104]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b50:	4a0f      	ldr	r2, [pc, #60]	@ (8001b90 <HAL_GPIO_Init+0x304>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f aea2 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	@ 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e12b      	b.n	8001e32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fae0 	bl	80011b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2224      	movs	r2, #36	@ 0x24
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f022 0201 	bic.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c2c:	f000 fd40 	bl	80026b0 <HAL_RCC_GetPCLK1Freq>
 8001c30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4a81      	ldr	r2, [pc, #516]	@ (8001e3c <HAL_I2C_Init+0x274>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d807      	bhi.n	8001c4c <HAL_I2C_Init+0x84>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a80      	ldr	r2, [pc, #512]	@ (8001e40 <HAL_I2C_Init+0x278>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	bf94      	ite	ls
 8001c44:	2301      	movls	r3, #1
 8001c46:	2300      	movhi	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e006      	b.n	8001c5a <HAL_I2C_Init+0x92>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e44 <HAL_I2C_Init+0x27c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	bf94      	ite	ls
 8001c54:	2301      	movls	r3, #1
 8001c56:	2300      	movhi	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0e7      	b.n	8001e32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4a78      	ldr	r2, [pc, #480]	@ (8001e48 <HAL_I2C_Init+0x280>)
 8001c66:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6a:	0c9b      	lsrs	r3, r3, #18
 8001c6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4a6a      	ldr	r2, [pc, #424]	@ (8001e3c <HAL_I2C_Init+0x274>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d802      	bhi.n	8001c9c <HAL_I2C_Init+0xd4>
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	e009      	b.n	8001cb0 <HAL_I2C_Init+0xe8>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ca2:	fb02 f303 	mul.w	r3, r2, r3
 8001ca6:	4a69      	ldr	r2, [pc, #420]	@ (8001e4c <HAL_I2C_Init+0x284>)
 8001ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cac:	099b      	lsrs	r3, r3, #6
 8001cae:	3301      	adds	r3, #1
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cc2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	495c      	ldr	r1, [pc, #368]	@ (8001e3c <HAL_I2C_Init+0x274>)
 8001ccc:	428b      	cmp	r3, r1
 8001cce:	d819      	bhi.n	8001d04 <HAL_I2C_Init+0x13c>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e59      	subs	r1, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cde:	1c59      	adds	r1, r3, #1
 8001ce0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ce4:	400b      	ands	r3, r1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <HAL_I2C_Init+0x138>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1e59      	subs	r1, r3, #1
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfe:	e051      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d00:	2304      	movs	r3, #4
 8001d02:	e04f      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d111      	bne.n	8001d30 <HAL_I2C_Init+0x168>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1e58      	subs	r0, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	440b      	add	r3, r1
 8001d1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf0c      	ite	eq
 8001d28:	2301      	moveq	r3, #1
 8001d2a:	2300      	movne	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	e012      	b.n	8001d56 <HAL_I2C_Init+0x18e>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	0099      	lsls	r1, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_I2C_Init+0x196>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e022      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10e      	bne.n	8001d84 <HAL_I2C_Init+0x1bc>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e58      	subs	r0, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	440b      	add	r3, r1
 8001d74:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d82:	e00f      	b.n	8001da4 <HAL_I2C_Init+0x1dc>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1e58      	subs	r0, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	0099      	lsls	r1, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	6809      	ldr	r1, [r1, #0]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dd2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	6911      	ldr	r1, [r2, #16]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68d2      	ldr	r2, [r2, #12]
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695a      	ldr	r2, [r3, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	000186a0 	.word	0x000186a0
 8001e40:	001e847f 	.word	0x001e847f
 8001e44:	003d08ff 	.word	0x003d08ff
 8001e48:	431bde83 	.word	0x431bde83
 8001e4c:	10624dd3 	.word	0x10624dd3

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e267      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d075      	beq.n	8001f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e6e:	4b88      	ldr	r3, [pc, #544]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d00c      	beq.n	8001e94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e7a:	4b85      	ldr	r3, [pc, #532]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d112      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e86:	4b82      	ldr	r3, [pc, #520]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e92:	d10b      	bne.n	8001eac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e94:	4b7e      	ldr	r3, [pc, #504]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d05b      	beq.n	8001f58 <HAL_RCC_OscConfig+0x108>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d157      	bne.n	8001f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e242      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb4:	d106      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x74>
 8001eb6:	4b76      	ldr	r3, [pc, #472]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a75      	ldr	r2, [pc, #468]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	e01d      	b.n	8001f00 <HAL_RCC_OscConfig+0xb0>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x98>
 8001ece:	4b70      	ldr	r3, [pc, #448]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a6f      	ldr	r2, [pc, #444]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b6d      	ldr	r3, [pc, #436]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6c      	ldr	r2, [pc, #432]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e00b      	b.n	8001f00 <HAL_RCC_OscConfig+0xb0>
 8001ee8:	4b69      	ldr	r3, [pc, #420]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a68      	ldr	r2, [pc, #416]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	4b66      	ldr	r3, [pc, #408]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a65      	ldr	r2, [pc, #404]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fb7e 	bl	8001608 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f10:	f7ff fb7a 	bl	8001608 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	@ 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e207      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	4b5b      	ldr	r3, [pc, #364]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0xc0>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7ff fb6a 	bl	8001608 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f38:	f7ff fb66 	bl	8001608 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b64      	cmp	r3, #100	@ 0x64
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1f3      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	4b51      	ldr	r3, [pc, #324]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0xe8>
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d063      	beq.n	800202e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f66:	4b4a      	ldr	r3, [pc, #296]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00b      	beq.n	8001f8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f72:	4b47      	ldr	r3, [pc, #284]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7e:	4b44      	ldr	r3, [pc, #272]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	4b41      	ldr	r3, [pc, #260]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x152>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d001      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1c7      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4937      	ldr	r1, [pc, #220]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	e03a      	b.n	800202e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	4b34      	ldr	r3, [pc, #208]	@ (8002094 <HAL_RCC_OscConfig+0x244>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff fb1f 	bl	8001608 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fce:	f7ff fb1b 	bl	8001608 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e1a8      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	4b28      	ldr	r3, [pc, #160]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	4925      	ldr	r1, [pc, #148]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
 8002000:	e015      	b.n	800202e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002002:	4b24      	ldr	r3, [pc, #144]	@ (8002094 <HAL_RCC_OscConfig+0x244>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002008:	f7ff fafe 	bl	8001608 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff fafa 	bl	8001608 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e187      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	4b1b      	ldr	r3, [pc, #108]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b00      	cmp	r3, #0
 8002038:	d036      	beq.n	80020a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d016      	beq.n	8002070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <HAL_RCC_OscConfig+0x248>)
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002048:	f7ff fade 	bl	8001608 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002050:	f7ff fada 	bl	8001608 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e167      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_RCC_OscConfig+0x240>)
 8002064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0x200>
 800206e:	e01b      	b.n	80020a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002070:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <HAL_RCC_OscConfig+0x248>)
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002076:	f7ff fac7 	bl	8001608 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800207c:	e00e      	b.n	800209c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207e:	f7ff fac3 	bl	8001608 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d907      	bls.n	800209c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e150      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
 8002090:	40023800 	.word	0x40023800
 8002094:	42470000 	.word	0x42470000
 8002098:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	4b88      	ldr	r3, [pc, #544]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 800209e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ea      	bne.n	800207e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 8097 	beq.w	80021e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ba:	4b81      	ldr	r3, [pc, #516]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10f      	bne.n	80020e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	4b7d      	ldr	r3, [pc, #500]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	4a7c      	ldr	r2, [pc, #496]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020d6:	4b7a      	ldr	r3, [pc, #488]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e2:	2301      	movs	r3, #1
 80020e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e6:	4b77      	ldr	r3, [pc, #476]	@ (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d118      	bne.n	8002124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f2:	4b74      	ldr	r3, [pc, #464]	@ (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a73      	ldr	r2, [pc, #460]	@ (80022c4 <HAL_RCC_OscConfig+0x474>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fe:	f7ff fa83 	bl	8001608 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002106:	f7ff fa7f 	bl	8001608 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e10c      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	4b6a      	ldr	r3, [pc, #424]	@ (80022c4 <HAL_RCC_OscConfig+0x474>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x2ea>
 800212c:	4b64      	ldr	r3, [pc, #400]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002130:	4a63      	ldr	r2, [pc, #396]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6713      	str	r3, [r2, #112]	@ 0x70
 8002138:	e01c      	b.n	8002174 <HAL_RCC_OscConfig+0x324>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b05      	cmp	r3, #5
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x30c>
 8002142:	4b5f      	ldr	r3, [pc, #380]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002146:	4a5e      	ldr	r2, [pc, #376]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6713      	str	r3, [r2, #112]	@ 0x70
 800214e:	4b5c      	ldr	r3, [pc, #368]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002152:	4a5b      	ldr	r2, [pc, #364]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6713      	str	r3, [r2, #112]	@ 0x70
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0x324>
 800215c:	4b58      	ldr	r3, [pc, #352]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002160:	4a57      	ldr	r2, [pc, #348]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002162:	f023 0301 	bic.w	r3, r3, #1
 8002166:	6713      	str	r3, [r2, #112]	@ 0x70
 8002168:	4b55      	ldr	r3, [pc, #340]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216c:	4a54      	ldr	r2, [pc, #336]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 800216e:	f023 0304 	bic.w	r3, r3, #4
 8002172:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d015      	beq.n	80021a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217c:	f7ff fa44 	bl	8001608 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002182:	e00a      	b.n	800219a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002184:	f7ff fa40 	bl	8001608 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0cb      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	4b49      	ldr	r3, [pc, #292]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ee      	beq.n	8002184 <HAL_RCC_OscConfig+0x334>
 80021a6:	e014      	b.n	80021d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a8:	f7ff fa2e 	bl	8001608 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7ff fa2a 	bl	8001608 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e0b5      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	4b3e      	ldr	r3, [pc, #248]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1ee      	bne.n	80021b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021d2:	7dfb      	ldrb	r3, [r7, #23]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d8:	4b39      	ldr	r3, [pc, #228]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021dc:	4a38      	ldr	r2, [pc, #224]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a1 	beq.w	8002330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021ee:	4b34      	ldr	r3, [pc, #208]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d05c      	beq.n	80022b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d141      	bne.n	8002286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b31      	ldr	r3, [pc, #196]	@ (80022c8 <HAL_RCC_OscConfig+0x478>)
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff f9fe 	bl	8001608 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff f9fa 	bl	8001608 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e087      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002222:	4b27      	ldr	r3, [pc, #156]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223c:	019b      	lsls	r3, r3, #6
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	3b01      	subs	r3, #1
 8002248:	041b      	lsls	r3, r3, #16
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	061b      	lsls	r3, r3, #24
 8002252:	491b      	ldr	r1, [pc, #108]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <HAL_RCC_OscConfig+0x478>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff f9d3 	bl	8001608 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7ff f9cf 	bl	8001608 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e05c      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x416>
 8002284:	e054      	b.n	8002330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_RCC_OscConfig+0x478>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff f9bc 	bl	8001608 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff f9b8 	bl	8001608 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e045      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <HAL_RCC_OscConfig+0x470>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x444>
 80022b2:	e03d      	b.n	8002330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e038      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40007000 	.word	0x40007000
 80022c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <HAL_RCC_OscConfig+0x4ec>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d028      	beq.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d121      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d11a      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022fc:	4013      	ands	r3, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002304:	4293      	cmp	r3, r2
 8002306:	d111      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	3b01      	subs	r3, #1
 8002316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d107      	bne.n	800232c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0cc      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002354:	4b68      	ldr	r3, [pc, #416]	@ (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d90c      	bls.n	800237c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b65      	ldr	r3, [pc, #404]	@ (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b63      	ldr	r3, [pc, #396]	@ (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e0b8      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002394:	4b59      	ldr	r3, [pc, #356]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4a58      	ldr	r2, [pc, #352]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 800239a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800239e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ac:	4b53      	ldr	r3, [pc, #332]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a52      	ldr	r2, [pc, #328]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b8:	4b50      	ldr	r3, [pc, #320]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	494d      	ldr	r1, [pc, #308]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d044      	beq.n	8002460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d107      	bne.n	80023ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023de:	4b47      	ldr	r3, [pc, #284]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d119      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e07f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fe:	4b3f      	ldr	r3, [pc, #252]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e06f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	4b3b      	ldr	r3, [pc, #236]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e067      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241e:	4b37      	ldr	r3, [pc, #220]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f023 0203 	bic.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4934      	ldr	r1, [pc, #208]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002430:	f7ff f8ea 	bl	8001608 <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	e00a      	b.n	800244e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7ff f8e6 	bl	8001608 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e04f      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	4b2b      	ldr	r3, [pc, #172]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 020c 	and.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	429a      	cmp	r2, r3
 800245e:	d1eb      	bne.n	8002438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002460:	4b25      	ldr	r3, [pc, #148]	@ (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d20c      	bcs.n	8002488 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b22      	ldr	r3, [pc, #136]	@ (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002476:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e032      	b.n	80024ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002494:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4916      	ldr	r1, [pc, #88]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d009      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b2:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	490e      	ldr	r1, [pc, #56]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024c6:	f000 f821 	bl	800250c <HAL_RCC_GetSysClockFreq>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b0b      	ldr	r3, [pc, #44]	@ (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	490a      	ldr	r1, [pc, #40]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	5ccb      	ldrb	r3, [r1, r3]
 80024da:	fa22 f303 	lsr.w	r3, r2, r3
 80024de:	4a09      	ldr	r2, [pc, #36]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024e2:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff f84a 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00
 80024fc:	40023800 	.word	0x40023800
 8002500:	080040b0 	.word	0x080040b0
 8002504:	20000000 	.word	0x20000000
 8002508:	20000004 	.word	0x20000004

0800250c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800250c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002510:	b090      	sub	sp, #64	@ 0x40
 8002512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002524:	4b59      	ldr	r3, [pc, #356]	@ (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	2b08      	cmp	r3, #8
 800252e:	d00d      	beq.n	800254c <HAL_RCC_GetSysClockFreq+0x40>
 8002530:	2b08      	cmp	r3, #8
 8002532:	f200 80a1 	bhi.w	8002678 <HAL_RCC_GetSysClockFreq+0x16c>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x34>
 800253a:	2b04      	cmp	r3, #4
 800253c:	d003      	beq.n	8002546 <HAL_RCC_GetSysClockFreq+0x3a>
 800253e:	e09b      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x184>)
 8002542:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002544:	e09b      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002546:	4b53      	ldr	r3, [pc, #332]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002548:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800254a:	e098      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800254c:	4b4f      	ldr	r3, [pc, #316]	@ (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002554:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002556:	4b4d      	ldr	r3, [pc, #308]	@ (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d028      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002562:	4b4a      	ldr	r3, [pc, #296]	@ (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	2200      	movs	r2, #0
 800256a:	623b      	str	r3, [r7, #32]
 800256c:	627a      	str	r2, [r7, #36]	@ 0x24
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002574:	2100      	movs	r1, #0
 8002576:	4b47      	ldr	r3, [pc, #284]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002578:	fb03 f201 	mul.w	r2, r3, r1
 800257c:	2300      	movs	r3, #0
 800257e:	fb00 f303 	mul.w	r3, r0, r3
 8002582:	4413      	add	r3, r2
 8002584:	4a43      	ldr	r2, [pc, #268]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x188>)
 8002586:	fba0 1202 	umull	r1, r2, r0, r2
 800258a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800258c:	460a      	mov	r2, r1
 800258e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002592:	4413      	add	r3, r2
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002598:	2200      	movs	r2, #0
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	61fa      	str	r2, [r7, #28]
 800259e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025a6:	f7fd fe17 	bl	80001d8 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4613      	mov	r3, r2
 80025b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025b2:	e053      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b4:	4b35      	ldr	r3, [pc, #212]	@ (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	099b      	lsrs	r3, r3, #6
 80025ba:	2200      	movs	r2, #0
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	617a      	str	r2, [r7, #20]
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025c6:	f04f 0b00 	mov.w	fp, #0
 80025ca:	4652      	mov	r2, sl
 80025cc:	465b      	mov	r3, fp
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	0159      	lsls	r1, r3, #5
 80025d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025dc:	0150      	lsls	r0, r2, #5
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	ebb2 080a 	subs.w	r8, r2, sl
 80025e6:	eb63 090b 	sbc.w	r9, r3, fp
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025fe:	ebb2 0408 	subs.w	r4, r2, r8
 8002602:	eb63 0509 	sbc.w	r5, r3, r9
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	00eb      	lsls	r3, r5, #3
 8002610:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002614:	00e2      	lsls	r2, r4, #3
 8002616:	4614      	mov	r4, r2
 8002618:	461d      	mov	r5, r3
 800261a:	eb14 030a 	adds.w	r3, r4, sl
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	eb45 030b 	adc.w	r3, r5, fp
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002632:	4629      	mov	r1, r5
 8002634:	028b      	lsls	r3, r1, #10
 8002636:	4621      	mov	r1, r4
 8002638:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800263c:	4621      	mov	r1, r4
 800263e:	028a      	lsls	r2, r1, #10
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002646:	2200      	movs	r2, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	60fa      	str	r2, [r7, #12]
 800264c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002650:	f7fd fdc2 	bl	80001d8 <__aeabi_uldivmod>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4613      	mov	r3, r2
 800265a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800265c:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <HAL_RCC_GetSysClockFreq+0x180>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	0c1b      	lsrs	r3, r3, #16
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800266c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800266e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002676:	e002      	b.n	800267e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b05      	ldr	r3, [pc, #20]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x184>)
 800267a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800267c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800267e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002680:	4618      	mov	r0, r3
 8002682:	3740      	adds	r7, #64	@ 0x40
 8002684:	46bd      	mov	sp, r7
 8002686:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	00f42400 	.word	0x00f42400
 8002694:	017d7840 	.word	0x017d7840

08002698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800269c:	4b03      	ldr	r3, [pc, #12]	@ (80026ac <HAL_RCC_GetHCLKFreq+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000000 	.word	0x20000000

080026b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b4:	f7ff fff0 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b05      	ldr	r3, [pc, #20]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	0a9b      	lsrs	r3, r3, #10
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	4903      	ldr	r1, [pc, #12]	@ (80026d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40023800 	.word	0x40023800
 80026d4:	080040c0 	.word	0x080040c0

080026d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07b      	b.n	80027e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d108      	bne.n	8002704 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026fa:	d009      	beq.n	8002710 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
 8002702:	e005      	b.n	8002710 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d106      	bne.n	8002730 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7fe fd8a 	bl	8001244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002746:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002794:	ea42 0103 	orr.w	r1, r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0104 	and.w	r1, r3, #4
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b6:	f003 0210 	and.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	69da      	ldr	r2, [r3, #28]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b088      	sub	sp, #32
 80027ee:	af02      	add	r7, sp, #8
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
 8002808:	e104      	b.n	8002a14 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002812:	d112      	bne.n	800283a <HAL_SPI_Receive+0x50>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10e      	bne.n	800283a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2204      	movs	r2, #4
 8002820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	4613      	mov	r3, r2
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	68f8      	ldr	r0, [r7, #12]
 8002832:	f000 f8f3 	bl	8002a1c <HAL_SPI_TransmitReceive>
 8002836:	4603      	mov	r3, r0
 8002838:	e0ec      	b.n	8002a14 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800283a:	f7fe fee5 	bl	8001608 <HAL_GetTick>
 800283e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <HAL_SPI_Receive+0x62>
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0e1      	b.n	8002a14 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_SPI_Receive+0x74>
 800285a:	2302      	movs	r3, #2
 800285c:	e0da      	b.n	8002a14 <HAL_SPI_Receive+0x22a>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2204      	movs	r2, #4
 800286a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	88fa      	ldrh	r2, [r7, #6]
 800287e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ac:	d10f      	bne.n	80028ce <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80028cc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d8:	2b40      	cmp	r3, #64	@ 0x40
 80028da:	d007      	beq.n	80028ec <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028ea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d170      	bne.n	80029d6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028f4:	e035      	b.n	8002962 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	d115      	bne.n	8002930 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f103 020c 	add.w	r2, r3, #12
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002910:	7812      	ldrb	r2, [r2, #0]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800292e:	e018      	b.n	8002962 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002930:	f7fe fe6a 	bl	8001608 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d803      	bhi.n	8002948 <HAL_SPI_Receive+0x15e>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002946:	d102      	bne.n	800294e <HAL_SPI_Receive+0x164>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e058      	b.n	8002a14 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1c4      	bne.n	80028f6 <HAL_SPI_Receive+0x10c>
 800296c:	e038      	b.n	80029e0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	d113      	bne.n	80029a4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002986:	b292      	uxth	r2, r2
 8002988:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298e:	1c9a      	adds	r2, r3, #2
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80029a2:	e018      	b.n	80029d6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029a4:	f7fe fe30 	bl	8001608 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d803      	bhi.n	80029bc <HAL_SPI_Receive+0x1d2>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029ba:	d102      	bne.n	80029c2 <HAL_SPI_Receive+0x1d8>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e01e      	b.n	8002a14 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1c6      	bne.n	800296e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	6839      	ldr	r1, [r7, #0]
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fa4b 	bl	8002e80 <SPI_EndRxTransaction>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002a12:	2300      	movs	r3, #0
  }
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08a      	sub	sp, #40	@ 0x28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
 8002a28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a2e:	f7fe fdeb 	bl	8001608 <HAL_GetTick>
 8002a32:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a3a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a46:	7ffb      	ldrb	r3, [r7, #31]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d00c      	beq.n	8002a66 <HAL_SPI_TransmitReceive+0x4a>
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a52:	d106      	bne.n	8002a62 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <HAL_SPI_TransmitReceive+0x46>
 8002a5c:	7ffb      	ldrb	r3, [r7, #31]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d001      	beq.n	8002a66 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
 8002a64:	e17f      	b.n	8002d66 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_SPI_TransmitReceive+0x5c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_SPI_TransmitReceive+0x5c>
 8002a72:	887b      	ldrh	r3, [r7, #2]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e174      	b.n	8002d66 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_SPI_TransmitReceive+0x6e>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e16d      	b.n	8002d66 <HAL_SPI_TransmitReceive+0x34a>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d003      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2205      	movs	r2, #5
 8002aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	887a      	ldrh	r2, [r7, #2]
 8002ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	887a      	ldrh	r2, [r7, #2]
 8002ace:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae6:	2b40      	cmp	r3, #64	@ 0x40
 8002ae8:	d007      	beq.n	8002afa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b02:	d17e      	bne.n	8002c02 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_SPI_TransmitReceive+0xf6>
 8002b0c:	8afb      	ldrh	r3, [r7, #22]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d16c      	bne.n	8002bec <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	881a      	ldrh	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	1c9a      	adds	r2, r3, #2
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b36:	e059      	b.n	8002bec <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d11b      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x162>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d016      	beq.n	8002b7e <HAL_SPI_TransmitReceive+0x162>
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d113      	bne.n	8002b7e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	881a      	ldrh	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	1c9a      	adds	r2, r3, #2
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d119      	bne.n	8002bc0 <HAL_SPI_TransmitReceive+0x1a4>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d014      	beq.n	8002bc0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba8:	1c9a      	adds	r2, r3, #2
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bc0:	f7fe fd22 	bl	8001608 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d80d      	bhi.n	8002bec <HAL_SPI_TransmitReceive+0x1d0>
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002bd6:	d009      	beq.n	8002bec <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0bc      	b.n	8002d66 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1a0      	bne.n	8002b38 <HAL_SPI_TransmitReceive+0x11c>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d19b      	bne.n	8002b38 <HAL_SPI_TransmitReceive+0x11c>
 8002c00:	e082      	b.n	8002d08 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_SPI_TransmitReceive+0x1f4>
 8002c0a:	8afb      	ldrh	r3, [r7, #22]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d171      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	330c      	adds	r3, #12
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c36:	e05d      	b.n	8002cf4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d11c      	bne.n	8002c80 <HAL_SPI_TransmitReceive+0x264>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d017      	beq.n	8002c80 <HAL_SPI_TransmitReceive+0x264>
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d114      	bne.n	8002c80 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	330c      	adds	r3, #12
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d119      	bne.n	8002cc2 <HAL_SPI_TransmitReceive+0x2a6>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d014      	beq.n	8002cc2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cc2:	f7fe fca1 	bl	8001608 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d803      	bhi.n	8002cda <HAL_SPI_TransmitReceive+0x2be>
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cd8:	d102      	bne.n	8002ce0 <HAL_SPI_TransmitReceive+0x2c4>
 8002cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d109      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e038      	b.n	8002d66 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d19c      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x21c>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d197      	bne.n	8002c38 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d08:	6a3a      	ldr	r2, [r7, #32]
 8002d0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 f91d 	bl	8002f4c <SPI_EndRxTxTransaction>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e01d      	b.n	8002d66 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10a      	bne.n	8002d48 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d32:	2300      	movs	r3, #0
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
  }
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3728      	adds	r7, #40	@ 0x28
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d80:	f7fe fc42 	bl	8001608 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d90:	f7fe fc3a 	bl	8001608 <HAL_GetTick>
 8002d94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d96:	4b39      	ldr	r3, [pc, #228]	@ (8002e7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	015b      	lsls	r3, r3, #5
 8002d9c:	0d1b      	lsrs	r3, r3, #20
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002da6:	e054      	b.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dae:	d050      	beq.n	8002e52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002db0:	f7fe fc2a 	bl	8001608 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d902      	bls.n	8002dc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d13d      	bne.n	8002e42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002dd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dde:	d111      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002de8:	d004      	beq.n	8002df4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002df2:	d107      	bne.n	8002e04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e0c:	d10f      	bne.n	8002e2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e017      	b.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d19b      	bne.n	8002da8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000000 	.word	0x20000000

08002e80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e94:	d111      	bne.n	8002eba <SPI_EndRxTransaction+0x3a>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e9e:	d004      	beq.n	8002eaa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ea8:	d107      	bne.n	8002eba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eb8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ec2:	d12a      	bne.n	8002f1a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ecc:	d012      	beq.n	8002ef4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2180      	movs	r1, #128	@ 0x80
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff ff49 	bl	8002d70 <SPI_WaitFlagStateUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d02d      	beq.n	8002f40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e026      	b.n	8002f42 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2200      	movs	r2, #0
 8002efc:	2101      	movs	r1, #1
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff ff36 	bl	8002d70 <SPI_WaitFlagStateUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01a      	beq.n	8002f40 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e013      	b.n	8002f42 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2101      	movs	r1, #1
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f7ff ff23 	bl	8002d70 <SPI_WaitFlagStateUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e000      	b.n	8002f42 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	2102      	movs	r1, #2
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff ff04 	bl	8002d70 <SPI_WaitFlagStateUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d007      	beq.n	8002f7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f72:	f043 0220 	orr.w	r2, r3, #32
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e032      	b.n	8002fe4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <SPI_EndRxTxTransaction+0xa0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff0 <SPI_EndRxTxTransaction+0xa4>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0d5b      	lsrs	r3, r3, #21
 8002f8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f9c:	d112      	bne.n	8002fc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2180      	movs	r1, #128	@ 0x80
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7ff fee1 	bl	8002d70 <SPI_WaitFlagStateUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d016      	beq.n	8002fe2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e00f      	b.n	8002fe4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fda:	2b80      	cmp	r3, #128	@ 0x80
 8002fdc:	d0f2      	beq.n	8002fc4 <SPI_EndRxTxTransaction+0x78>
 8002fde:	e000      	b.n	8002fe2 <SPI_EndRxTxTransaction+0x96>
        break;
 8002fe0:	bf00      	nop
  }

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	165e9f81 	.word	0x165e9f81

08002ff4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e041      	b.n	800308a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fe f97c 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f000 fc0e 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d001      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e044      	b.n	8003136 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003144 <HAL_TIM_Base_Start_IT+0xb0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d018      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x6c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d6:	d013      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x6c>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a1a      	ldr	r2, [pc, #104]	@ (8003148 <HAL_TIM_Base_Start_IT+0xb4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d00e      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x6c>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a19      	ldr	r2, [pc, #100]	@ (800314c <HAL_TIM_Base_Start_IT+0xb8>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x6c>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a17      	ldr	r2, [pc, #92]	@ (8003150 <HAL_TIM_Base_Start_IT+0xbc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <HAL_TIM_Base_Start_IT+0x6c>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a16      	ldr	r2, [pc, #88]	@ (8003154 <HAL_TIM_Base_Start_IT+0xc0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d111      	bne.n	8003124 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b06      	cmp	r3, #6
 8003110:	d010      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003122:	e007      	b.n	8003134 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40010000 	.word	0x40010000
 8003148:	40000400 	.word	0x40000400
 800314c:	40000800 	.word	0x40000800
 8003150:	40000c00 	.word	0x40000c00
 8003154:	40014000 	.word	0x40014000

08003158 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e041      	b.n	80031ee <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f839 	bl	80031f6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	4619      	mov	r1, r3
 8003196:	4610      	mov	r0, r2
 8003198:	f000 fb5c 	bl	8003854 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e041      	b.n	80032a2 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe f84e 	bl	80012d4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f000 fb02 	bl	8003854 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 0208 	bic.w	r2, r2, #8
 800325e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_TIM_OnePulse_Start>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032d4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d108      	bne.n	80032ee <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032dc:	7bbb      	ldrb	r3, [r7, #14]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d105      	bne.n	80032ee <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032e2:	7b7b      	ldrb	r3, [r7, #13]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d102      	bne.n	80032ee <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032e8:	7b3b      	ldrb	r3, [r7, #12]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d001      	beq.n	80032f2 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e02b      	b.n	800334a <HAL_TIM_OnePulse_Start+0x9e>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2202      	movs	r2, #2
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    whatever the combination, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2201      	movs	r2, #1
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fddd 	bl	8003eda <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2201      	movs	r2, #1
 8003326:	2104      	movs	r1, #4
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fdd6 	bl	8003eda <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a08      	ldr	r2, [pc, #32]	@ (8003354 <HAL_TIM_OnePulse_Start+0xa8>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d107      	bne.n	8003348 <HAL_TIM_OnePulse_Start+0x9c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003346:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40010000 	.word	0x40010000

08003358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01b      	beq.n	80033bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0202 	mvn.w	r2, #2
 800338c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa37 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa29 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fa3a 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d020      	beq.n	8003408 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01b      	beq.n	8003408 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0204 	mvn.w	r2, #4
 80033d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2202      	movs	r2, #2
 80033de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fa11 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 80033f4:	e005      	b.n	8003402 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fa03 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 fa14 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d020      	beq.n	8003454 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d01b      	beq.n	8003454 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0208 	mvn.w	r2, #8
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2204      	movs	r2, #4
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f9eb 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f9dd 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f9ee 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b00      	cmp	r3, #0
 800345c:	d020      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0310 	and.w	r3, r3, #16
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01b      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0210 	mvn.w	r2, #16
 8003470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2208      	movs	r2, #8
 8003476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f9c5 	bl	8003816 <HAL_TIM_IC_CaptureCallback>
 800348c:	e005      	b.n	800349a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f9b7 	bl	8003802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f9c8 	bl	800382a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0201 	mvn.w	r2, #1
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd fb74 	bl	8000bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00c      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fd96 	bl	8004014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00c      	beq.n	800350c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f999 	bl	800383e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0220 	mvn.w	r2, #32
 8003528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fd68 	bl	8004000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_TIM_OC_ConfigChannel+0x1e>
 8003552:	2302      	movs	r3, #2
 8003554:	e048      	b.n	80035e8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2b0c      	cmp	r3, #12
 8003562:	d839      	bhi.n	80035d8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003564:	a201      	add	r2, pc, #4	@ (adr r2, 800356c <HAL_TIM_OC_ConfigChannel+0x34>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	080035a1 	.word	0x080035a1
 8003570:	080035d9 	.word	0x080035d9
 8003574:	080035d9 	.word	0x080035d9
 8003578:	080035d9 	.word	0x080035d9
 800357c:	080035af 	.word	0x080035af
 8003580:	080035d9 	.word	0x080035d9
 8003584:	080035d9 	.word	0x080035d9
 8003588:	080035d9 	.word	0x080035d9
 800358c:	080035bd 	.word	0x080035bd
 8003590:	080035d9 	.word	0x080035d9
 8003594:	080035d9 	.word	0x080035d9
 8003598:	080035d9 	.word	0x080035d9
 800359c:	080035cb 	.word	0x080035cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f9e0 	bl	800396c <TIM_OC1_SetConfig>
      break;
 80035ac:	e017      	b.n	80035de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	68b9      	ldr	r1, [r7, #8]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fa3f 	bl	8003a38 <TIM_OC2_SetConfig>
      break;
 80035ba:	e010      	b.n	80035de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 faa4 	bl	8003b10 <TIM_OC3_SetConfig>
      break;
 80035c8:	e009      	b.n	80035de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fb07 	bl	8003be4 <TIM_OC4_SetConfig>
      break;
 80035d6:	e002      	b.n	80035de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	75fb      	strb	r3, [r7, #23]
      break;
 80035dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_TIM_ConfigClockSource+0x1c>
 8003608:	2302      	movs	r3, #2
 800360a:	e0b4      	b.n	8003776 <HAL_TIM_ConfigClockSource+0x186>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800362a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003644:	d03e      	beq.n	80036c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800364a:	f200 8087 	bhi.w	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800364e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003652:	f000 8086 	beq.w	8003762 <HAL_TIM_ConfigClockSource+0x172>
 8003656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800365a:	d87f      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800365c:	2b70      	cmp	r3, #112	@ 0x70
 800365e:	d01a      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0xa6>
 8003660:	2b70      	cmp	r3, #112	@ 0x70
 8003662:	d87b      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003664:	2b60      	cmp	r3, #96	@ 0x60
 8003666:	d050      	beq.n	800370a <HAL_TIM_ConfigClockSource+0x11a>
 8003668:	2b60      	cmp	r3, #96	@ 0x60
 800366a:	d877      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800366c:	2b50      	cmp	r3, #80	@ 0x50
 800366e:	d03c      	beq.n	80036ea <HAL_TIM_ConfigClockSource+0xfa>
 8003670:	2b50      	cmp	r3, #80	@ 0x50
 8003672:	d873      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003674:	2b40      	cmp	r3, #64	@ 0x40
 8003676:	d058      	beq.n	800372a <HAL_TIM_ConfigClockSource+0x13a>
 8003678:	2b40      	cmp	r3, #64	@ 0x40
 800367a:	d86f      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800367c:	2b30      	cmp	r3, #48	@ 0x30
 800367e:	d064      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003680:	2b30      	cmp	r3, #48	@ 0x30
 8003682:	d86b      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 8003684:	2b20      	cmp	r3, #32
 8003686:	d060      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003688:	2b20      	cmp	r3, #32
 800368a:	d867      	bhi.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
 800368c:	2b00      	cmp	r3, #0
 800368e:	d05c      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003690:	2b10      	cmp	r3, #16
 8003692:	d05a      	beq.n	800374a <HAL_TIM_ConfigClockSource+0x15a>
 8003694:	e062      	b.n	800375c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036a6:	f000 fbf8 	bl	8003e9a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	609a      	str	r2, [r3, #8]
      break;
 80036c2:	e04f      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036d4:	f000 fbe1 	bl	8003e9a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036e6:	609a      	str	r2, [r3, #8]
      break;
 80036e8:	e03c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f6:	461a      	mov	r2, r3
 80036f8:	f000 fb55 	bl	8003da6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2150      	movs	r1, #80	@ 0x50
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fbae 	bl	8003e64 <TIM_ITRx_SetConfig>
      break;
 8003708:	e02c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003716:	461a      	mov	r2, r3
 8003718:	f000 fb74 	bl	8003e04 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2160      	movs	r1, #96	@ 0x60
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fb9e 	bl	8003e64 <TIM_ITRx_SetConfig>
      break;
 8003728:	e01c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003736:	461a      	mov	r2, r3
 8003738:	f000 fb35 	bl	8003da6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2140      	movs	r1, #64	@ 0x40
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fb8e 	bl	8003e64 <TIM_ITRx_SetConfig>
      break;
 8003748:	e00c      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4619      	mov	r1, r3
 8003754:	4610      	mov	r0, r2
 8003756:	f000 fb85 	bl	8003e64 <TIM_ITRx_SetConfig>
      break;
 800375a:	e003      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e000      	b.n	8003764 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003774:	7bfb      	ldrb	r3, [r7, #15]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003792:	2302      	movs	r3, #2
 8003794:	e031      	b.n	80037fa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80037a6:	6839      	ldr	r1, [r7, #0]
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fa6b 	bl	8003c84 <TIM_SlaveTimer_SetConfig>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d009      	beq.n	80037c8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e018      	b.n	80037fa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037d6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037e6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a3a      	ldr	r2, [pc, #232]	@ (8003950 <TIM_Base_SetConfig+0xfc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00f      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003872:	d00b      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a37      	ldr	r2, [pc, #220]	@ (8003954 <TIM_Base_SetConfig+0x100>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d007      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a36      	ldr	r2, [pc, #216]	@ (8003958 <TIM_Base_SetConfig+0x104>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d003      	beq.n	800388c <TIM_Base_SetConfig+0x38>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a35      	ldr	r2, [pc, #212]	@ (800395c <TIM_Base_SetConfig+0x108>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d108      	bne.n	800389e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003950 <TIM_Base_SetConfig+0xfc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d01b      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ac:	d017      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a28      	ldr	r2, [pc, #160]	@ (8003954 <TIM_Base_SetConfig+0x100>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d013      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a27      	ldr	r2, [pc, #156]	@ (8003958 <TIM_Base_SetConfig+0x104>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00f      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a26      	ldr	r2, [pc, #152]	@ (800395c <TIM_Base_SetConfig+0x108>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00b      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a25      	ldr	r2, [pc, #148]	@ (8003960 <TIM_Base_SetConfig+0x10c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a24      	ldr	r2, [pc, #144]	@ (8003964 <TIM_Base_SetConfig+0x110>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <TIM_Base_SetConfig+0x8a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a23      	ldr	r2, [pc, #140]	@ (8003968 <TIM_Base_SetConfig+0x114>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d108      	bne.n	80038f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a0e      	ldr	r2, [pc, #56]	@ (8003950 <TIM_Base_SetConfig+0xfc>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d103      	bne.n	8003924 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d105      	bne.n	8003942 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f023 0201 	bic.w	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	611a      	str	r2, [r3, #16]
  }
}
 8003942:	bf00      	nop
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40010000 	.word	0x40010000
 8003954:	40000400 	.word	0x40000400
 8003958:	40000800 	.word	0x40000800
 800395c:	40000c00 	.word	0x40000c00
 8003960:	40014000 	.word	0x40014000
 8003964:	40014400 	.word	0x40014400
 8003968:	40014800 	.word	0x40014800

0800396c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	f023 0201 	bic.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f023 0303 	bic.w	r3, r3, #3
 80039a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f023 0302 	bic.w	r3, r3, #2
 80039b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a34 <TIM_OC1_SetConfig+0xc8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d10c      	bne.n	80039e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f023 0308 	bic.w	r3, r3, #8
 80039ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f023 0304 	bic.w	r3, r3, #4
 80039e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a13      	ldr	r2, [pc, #76]	@ (8003a34 <TIM_OC1_SetConfig+0xc8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d111      	bne.n	8003a0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80039f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	621a      	str	r2, [r3, #32]
}
 8003a28:	bf00      	nop
 8003a2a:	371c      	adds	r7, #28
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40010000 	.word	0x40010000

08003a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	f023 0210 	bic.w	r2, r3, #16
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	021b      	lsls	r3, r3, #8
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f023 0320 	bic.w	r3, r3, #32
 8003a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a1e      	ldr	r2, [pc, #120]	@ (8003b0c <TIM_OC2_SetConfig+0xd4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10d      	bne.n	8003ab4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a15      	ldr	r2, [pc, #84]	@ (8003b0c <TIM_OC2_SetConfig+0xd4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d113      	bne.n	8003ae4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	371c      	adds	r7, #28
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000

08003b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1d      	ldr	r2, [pc, #116]	@ (8003be0 <TIM_OC3_SetConfig+0xd0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d10d      	bne.n	8003b8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	021b      	lsls	r3, r3, #8
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	@ (8003be0 <TIM_OC3_SetConfig+0xd0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d113      	bne.n	8003bba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	40010000 	.word	0x40010000

08003be4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	031b      	lsls	r3, r3, #12
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a10      	ldr	r2, [pc, #64]	@ (8003c80 <TIM_OC4_SetConfig+0x9c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d109      	bne.n	8003c58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	019b      	lsls	r3, r3, #6
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40010000 	.word	0x40010000

08003c84 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f023 0307 	bic.w	r3, r3, #7
 8003cb2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b70      	cmp	r3, #112	@ 0x70
 8003ccc:	d01a      	beq.n	8003d04 <TIM_SlaveTimer_SetConfig+0x80>
 8003cce:	2b70      	cmp	r3, #112	@ 0x70
 8003cd0:	d860      	bhi.n	8003d94 <TIM_SlaveTimer_SetConfig+0x110>
 8003cd2:	2b60      	cmp	r3, #96	@ 0x60
 8003cd4:	d054      	beq.n	8003d80 <TIM_SlaveTimer_SetConfig+0xfc>
 8003cd6:	2b60      	cmp	r3, #96	@ 0x60
 8003cd8:	d85c      	bhi.n	8003d94 <TIM_SlaveTimer_SetConfig+0x110>
 8003cda:	2b50      	cmp	r3, #80	@ 0x50
 8003cdc:	d046      	beq.n	8003d6c <TIM_SlaveTimer_SetConfig+0xe8>
 8003cde:	2b50      	cmp	r3, #80	@ 0x50
 8003ce0:	d858      	bhi.n	8003d94 <TIM_SlaveTimer_SetConfig+0x110>
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d019      	beq.n	8003d1a <TIM_SlaveTimer_SetConfig+0x96>
 8003ce6:	2b40      	cmp	r3, #64	@ 0x40
 8003ce8:	d854      	bhi.n	8003d94 <TIM_SlaveTimer_SetConfig+0x110>
 8003cea:	2b30      	cmp	r3, #48	@ 0x30
 8003cec:	d055      	beq.n	8003d9a <TIM_SlaveTimer_SetConfig+0x116>
 8003cee:	2b30      	cmp	r3, #48	@ 0x30
 8003cf0:	d850      	bhi.n	8003d94 <TIM_SlaveTimer_SetConfig+0x110>
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d051      	beq.n	8003d9a <TIM_SlaveTimer_SetConfig+0x116>
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d84c      	bhi.n	8003d94 <TIM_SlaveTimer_SetConfig+0x110>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d04d      	beq.n	8003d9a <TIM_SlaveTimer_SetConfig+0x116>
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d04b      	beq.n	8003d9a <TIM_SlaveTimer_SetConfig+0x116>
 8003d02:	e047      	b.n	8003d94 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003d14:	f000 f8c1 	bl	8003e9a <TIM_ETR_SetConfig>
      break;
 8003d18:	e040      	b.n	8003d9c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d101      	bne.n	8003d26 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e03b      	b.n	8003d9e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6a1a      	ldr	r2, [r3, #32]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d4c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]
      break;
 8003d6a:	e017      	b.n	8003d9c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f000 f814 	bl	8003da6 <TIM_TI1_ConfigInputStage>
      break;
 8003d7e:	e00d      	b.n	8003d9c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f000 f839 	bl	8003e04 <TIM_TI2_ConfigInputStage>
      break;
 8003d92:	e003      	b.n	8003d9c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	75fb      	strb	r3, [r7, #23]
      break;
 8003d98:	e000      	b.n	8003d9c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003d9a:	bf00      	nop
  }

  return status;
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b087      	sub	sp, #28
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f023 0201 	bic.w	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f023 030a 	bic.w	r3, r3, #10
 8003de2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	621a      	str	r2, [r3, #32]
}
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	f023 0210 	bic.w	r2, r3, #16
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	031b      	lsls	r3, r3, #12
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	621a      	str	r2, [r3, #32]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	f043 0307 	orr.w	r3, r3, #7
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	609a      	str	r2, [r3, #8]
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b087      	sub	sp, #28
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
 8003ea6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	021a      	lsls	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	609a      	str	r2, [r3, #8]
}
 8003ece:	bf00      	nop
 8003ed0:	371c      	adds	r7, #28
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b087      	sub	sp, #28
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	60f8      	str	r0, [r7, #12]
 8003ee2:	60b9      	str	r1, [r7, #8]
 8003ee4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2201      	movs	r2, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a1a      	ldr	r2, [r3, #32]
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	401a      	ands	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1a      	ldr	r2, [r3, #32]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	431a      	orrs	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	621a      	str	r2, [r3, #32]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e050      	b.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d018      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f88:	d013      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a18      	ldr	r2, [pc, #96]	@ (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00e      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a16      	ldr	r2, [pc, #88]	@ (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a15      	ldr	r2, [pc, #84]	@ (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a13      	ldr	r2, [pc, #76]	@ (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10c      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40014000 	.word	0x40014000

08004000 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <memset>:
 8004028:	4402      	add	r2, r0
 800402a:	4603      	mov	r3, r0
 800402c:	4293      	cmp	r3, r2
 800402e:	d100      	bne.n	8004032 <memset+0xa>
 8004030:	4770      	bx	lr
 8004032:	f803 1b01 	strb.w	r1, [r3], #1
 8004036:	e7f9      	b.n	800402c <memset+0x4>

08004038 <__libc_init_array>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	4d0d      	ldr	r5, [pc, #52]	@ (8004070 <__libc_init_array+0x38>)
 800403c:	4c0d      	ldr	r4, [pc, #52]	@ (8004074 <__libc_init_array+0x3c>)
 800403e:	1b64      	subs	r4, r4, r5
 8004040:	10a4      	asrs	r4, r4, #2
 8004042:	2600      	movs	r6, #0
 8004044:	42a6      	cmp	r6, r4
 8004046:	d109      	bne.n	800405c <__libc_init_array+0x24>
 8004048:	4d0b      	ldr	r5, [pc, #44]	@ (8004078 <__libc_init_array+0x40>)
 800404a:	4c0c      	ldr	r4, [pc, #48]	@ (800407c <__libc_init_array+0x44>)
 800404c:	f000 f818 	bl	8004080 <_init>
 8004050:	1b64      	subs	r4, r4, r5
 8004052:	10a4      	asrs	r4, r4, #2
 8004054:	2600      	movs	r6, #0
 8004056:	42a6      	cmp	r6, r4
 8004058:	d105      	bne.n	8004066 <__libc_init_array+0x2e>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004060:	4798      	blx	r3
 8004062:	3601      	adds	r6, #1
 8004064:	e7ee      	b.n	8004044 <__libc_init_array+0xc>
 8004066:	f855 3b04 	ldr.w	r3, [r5], #4
 800406a:	4798      	blx	r3
 800406c:	3601      	adds	r6, #1
 800406e:	e7f2      	b.n	8004056 <__libc_init_array+0x1e>
 8004070:	080040d0 	.word	0x080040d0
 8004074:	080040d0 	.word	0x080040d0
 8004078:	080040d0 	.word	0x080040d0
 800407c:	080040d4 	.word	0x080040d4

08004080 <_init>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	bf00      	nop
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr

0800408c <_fini>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	bf00      	nop
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr
