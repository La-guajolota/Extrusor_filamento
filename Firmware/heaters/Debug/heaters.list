
heaters.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005094  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800522c  0800522c  0000622c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800525c  0800525c  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800525c  0800525c  0000625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005264  08005264  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005264  08005264  00006264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005268  08005268  00006268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800526c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  2000000c  08005278  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  08005278  000072dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef55  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000213f  00000000  00000000  00015f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  000180d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf3  00000000  00000000  00019010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160dd  00000000  00000000  00019c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109c4  00000000  00000000  0002fce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca26  00000000  00000000  000406a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd0ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004120  00000000  00000000  000cd110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d1230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005214 	.word	0x08005214

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005214 	.word	0x08005214

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <user_i2c_read>:
static HAL_StatusTypeDef user_i2c_read(AS5048B_Driver_t *drv,
                                      uint8_t dev_id,
                                      uint8_t reg_addr,
                                      uint8_t *reg_data,
                                      uint16_t len)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af02      	add	r7, sp, #8
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	460b      	mov	r3, r1
 8000510:	72fb      	strb	r3, [r7, #11]
 8000512:	4613      	mov	r3, r2
 8000514:	72bb      	strb	r3, [r7, #10]
    uint16_t addr = dev_id << 1;
 8000516:	7afb      	ldrb	r3, [r7, #11]
 8000518:	b29b      	uxth	r3, r3
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef rslt;

    rslt = HAL_I2C_Master_Transmit(drv->hi2c, addr, &reg_addr, 1, HAL_MAX_DELAY);
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	f107 020a 	add.w	r2, r7, #10
 8000526:	8af9      	ldrh	r1, [r7, #22]
 8000528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	2301      	movs	r3, #1
 8000530:	f001 fdee 	bl	8002110 <HAL_I2C_Master_Transmit>
 8000534:	4603      	mov	r3, r0
 8000536:	757b      	strb	r3, [r7, #21]
    if (rslt != HAL_OK) return rslt;
 8000538:	7d7b      	ldrb	r3, [r7, #21]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <user_i2c_read+0x3e>
 800053e:	7d7b      	ldrb	r3, [r7, #21]
 8000540:	e00a      	b.n	8000558 <user_i2c_read+0x54>
    return HAL_I2C_Master_Receive(drv->hi2c, addr, reg_data, len, HAL_MAX_DELAY);
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	6818      	ldr	r0, [r3, #0]
 8000546:	8c3b      	ldrh	r3, [r7, #32]
 8000548:	8af9      	ldrh	r1, [r7, #22]
 800054a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800054e:	9200      	str	r2, [sp, #0]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	f001 fedb 	bl	800230c <HAL_I2C_Master_Receive>
 8000556:	4603      	mov	r3, r0
}
 8000558:	4618      	mov	r0, r3
 800055a:	3718      	adds	r7, #24
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <AS5048B_Init>:
}

/* Public API ---------------------------------------------------------------*/
HAL_StatusTypeDef AS5048B_Init(AS5048B_Driver_t *driver,
                               I2C_HandleTypeDef *hi2c)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
    if (!driver || !hi2c) return HAL_ERROR;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d002      	beq.n	8000576 <AS5048B_Init+0x16>
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d101      	bne.n	800057a <AS5048B_Init+0x1a>
 8000576:	2301      	movs	r3, #1
 8000578:	e006      	b.n	8000588 <AS5048B_Init+0x28>
    driver->hi2c = hi2c;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	601a      	str	r2, [r3, #0]
    driver->device_count = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	769a      	strb	r2, [r3, #26]
    return HAL_OK;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <AS5048B_AddDevice>:

HAL_StatusTypeDef AS5048B_AddDevice(AS5048B_Driver_t *driver,
                                    uint8_t num_encoder,
                                    uint8_t dev_id)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
 80005a0:	4613      	mov	r3, r2
 80005a2:	70bb      	strb	r3, [r7, #2]
    if (!driver || num_encoder >= AS5048B_MAX_DEVICES) return HAL_ERROR;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d002      	beq.n	80005b0 <AS5048B_AddDevice+0x1c>
 80005aa:	78fb      	ldrb	r3, [r7, #3]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d901      	bls.n	80005b4 <AS5048B_AddDevice+0x20>
 80005b0:	2301      	movs	r3, #1
 80005b2:	e022      	b.n	80005fa <AS5048B_AddDevice+0x66>
    if (driver->device_count >= AS5048B_MAX_DEVICES) return HAL_ERROR;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7e9b      	ldrb	r3, [r3, #26]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d901      	bls.n	80005c0 <AS5048B_AddDevice+0x2c>
 80005bc:	2301      	movs	r3, #1
 80005be:	e01c      	b.n	80005fa <AS5048B_AddDevice+0x66>

    driver->devices[num_encoder].dev_id = dev_id;
 80005c0:	78fa      	ldrb	r2, [r7, #3]
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4613      	mov	r3, r2
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	440b      	add	r3, r1
 80005d0:	330e      	adds	r3, #14
 80005d2:	78ba      	ldrb	r2, [r7, #2]
 80005d4:	701a      	strb	r2, [r3, #0]
    driver->device_count++;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7e9b      	ldrb	r3, [r3, #26]
 80005da:	3301      	adds	r3, #1
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	769a      	strb	r2, [r3, #26]
    return HAL_I2C_IsDeviceReady(driver->hi2c, dev_id << 1, 1, HAL_MAX_DELAY);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	78bb      	ldrb	r3, [r7, #2]
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	b299      	uxth	r1, r3
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005f2:	2201      	movs	r2, #1
 80005f4:	f002 f8bc 	bl	8002770 <HAL_I2C_IsDeviceReady>
 80005f8:	4603      	mov	r3, r0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}

08000602 <AS5048B_UpdateRegisters>:
    }
}

int AS5048B_UpdateRegisters(AS5048B_Driver_t *driver,
                            uint8_t num_encoder)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b088      	sub	sp, #32
 8000606:	af02      	add	r7, sp, #8
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	460b      	mov	r3, r1
 800060c:	70fb      	strb	r3, [r7, #3]
    AS5048B_Sensor *sens = &driver->devices[num_encoder];
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	4613      	mov	r3, r2
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	4413      	add	r3, r2
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	4413      	add	r3, r2
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	3304      	adds	r3, #4
 8000620:	617b      	str	r3, [r7, #20]
    uint8_t buf[10];
    HAL_StatusTypeDef st = HAL_OK;
 8000622:	2300      	movs	r3, #0
 8000624:	74fb      	strb	r3, [r7, #19]

    st |= user_i2c_read(driver, sens->dev_id, REG_PROG_CTRL, buf, 1);
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	7a99      	ldrb	r1, [r3, #10]
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	2201      	movs	r2, #1
 8000630:	9200      	str	r2, [sp, #0]
 8000632:	2203      	movs	r2, #3
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ff65 	bl	8000504 <user_i2c_read>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	7cfb      	ldrb	r3, [r7, #19]
 8000640:	4313      	orrs	r3, r2
 8000642:	74fb      	strb	r3, [r7, #19]
    st |= user_i2c_read(driver, sens->dev_id, REG_I2C_ADDR, buf + 1, 2);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	7a99      	ldrb	r1, [r3, #10]
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	3301      	adds	r3, #1
 800064e:	2202      	movs	r2, #2
 8000650:	9200      	str	r2, [sp, #0]
 8000652:	2215      	movs	r2, #21
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ff55 	bl	8000504 <user_i2c_read>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	7cfb      	ldrb	r3, [r7, #19]
 8000660:	4313      	orrs	r3, r2
 8000662:	74fb      	strb	r3, [r7, #19]
    st |= user_i2c_read(driver, sens->dev_id, REG_AGC, buf + 4, 5);
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	7a99      	ldrb	r1, [r3, #10]
 8000668:	f107 0308 	add.w	r3, r7, #8
 800066c:	3304      	adds	r3, #4
 800066e:	2205      	movs	r2, #5
 8000670:	9200      	str	r2, [sp, #0]
 8000672:	22fa      	movs	r2, #250	@ 0xfa
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f7ff ff45 	bl	8000504 <user_i2c_read>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	7cfb      	ldrb	r3, [r7, #19]
 8000680:	4313      	orrs	r3, r2
 8000682:	74fb      	strb	r3, [r7, #19]

    sens->registers.prog_ctrl            = buf[0];
 8000684:	7a3b      	ldrb	r3, [r7, #8]
 8000686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800068a:	b2d9      	uxtb	r1, r3
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	7a53      	ldrb	r3, [r2, #9]
 8000690:	f361 0306 	bfi	r3, r1, #0, #7
 8000694:	7253      	strb	r3, [r2, #9]
    sens->registers.i2c_slave_addr       = buf[1];
 8000696:	7a7b      	ldrb	r3, [r7, #9]
 8000698:	f003 031f 	and.w	r3, r3, #31
 800069c:	b2d9      	uxtb	r1, r3
 800069e:	697a      	ldr	r2, [r7, #20]
 80006a0:	7a13      	ldrb	r3, [r2, #8]
 80006a2:	f361 0304 	bfi	r3, r1, #0, #5
 80006a6:	7213      	strb	r3, [r2, #8]
    sens->registers.zero_pos_high        = buf[2];
 80006a8:	7aba      	ldrb	r2, [r7, #10]
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	71da      	strb	r2, [r3, #7]
    sens->registers.zero_pos_low         = buf[3];
 80006ae:	7afb      	ldrb	r3, [r7, #11]
 80006b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006b4:	b2d9      	uxtb	r1, r3
 80006b6:	697a      	ldr	r2, [r7, #20]
 80006b8:	7993      	ldrb	r3, [r2, #6]
 80006ba:	f361 0305 	bfi	r3, r1, #0, #6
 80006be:	7193      	strb	r3, [r2, #6]
    sens->registers.automatic_gain_control = buf[4];
 80006c0:	7b3a      	ldrb	r2, [r7, #12]
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	715a      	strb	r2, [r3, #5]
    sens->registers.diagnostics          = buf[5];
 80006c6:	7b7b      	ldrb	r3, [r7, #13]
 80006c8:	f003 030f 	and.w	r3, r3, #15
 80006cc:	b2d9      	uxtb	r1, r3
 80006ce:	697a      	ldr	r2, [r7, #20]
 80006d0:	7913      	ldrb	r3, [r2, #4]
 80006d2:	f361 0303 	bfi	r3, r1, #0, #4
 80006d6:	7113      	strb	r3, [r2, #4]
    sens->registers.magnitude_high       = buf[6];
 80006d8:	7bba      	ldrb	r2, [r7, #14]
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	70da      	strb	r2, [r3, #3]
    sens->registers.magnitude_low        = buf[7];
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006e4:	b2d9      	uxtb	r1, r3
 80006e6:	697a      	ldr	r2, [r7, #20]
 80006e8:	7893      	ldrb	r3, [r2, #2]
 80006ea:	f361 0305 	bfi	r3, r1, #0, #6
 80006ee:	7093      	strb	r3, [r2, #2]
    sens->registers.angle_high           = buf[8];
 80006f0:	7c3a      	ldrb	r2, [r7, #16]
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	705a      	strb	r2, [r3, #1]
    sens->registers.angle_low            = buf[9] >> 2;
 80006f6:	7c7b      	ldrb	r3, [r7, #17]
 80006f8:	089b      	lsrs	r3, r3, #2
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000700:	b2d9      	uxtb	r1, r3
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	7813      	ldrb	r3, [r2, #0]
 8000706:	f361 0305 	bfi	r3, r1, #0, #6
 800070a:	7013      	strb	r3, [r2, #0]

    return (int)st;
 800070c:	7cfb      	ldrb	r3, [r7, #19]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3718      	adds	r7, #24
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <AS5048B_GetAngleDegrees>:
    return (int)st;
}

float AS5048B_GetAngleDegrees(AS5048B_Driver_t *driver,
                              uint8_t num_encoder)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af02      	add	r7, sp, #8
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
    AS5048B_Sensor *sens = &driver->devices[num_encoder];
 8000724:	78fa      	ldrb	r2, [r7, #3]
 8000726:	4613      	mov	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	3304      	adds	r3, #4
 8000736:	60fb      	str	r3, [r7, #12]
    uint8_t data[2];
    if (user_i2c_read(driver, sens->dev_id, REG_ANGLE_HIGH, data, 2) != HAL_OK)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	7a99      	ldrb	r1, [r3, #10]
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2202      	movs	r2, #2
 8000742:	9200      	str	r2, [sp, #0]
 8000744:	22fe      	movs	r2, #254	@ 0xfe
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff fedc 	bl	8000504 <user_i2c_read>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d002      	beq.n	8000758 <AS5048B_GetAngleDegrees+0x40>
        return -1.0f;
 8000752:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8000756:	e017      	b.n	8000788 <AS5048B_GetAngleDegrees+0x70>

    uint16_t raw = ((uint16_t)data[0] << 6) | (data[1] >> 2);
 8000758:	7a3b      	ldrb	r3, [r7, #8]
 800075a:	b21b      	sxth	r3, r3
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	b21a      	sxth	r2, r3
 8000760:	7a7b      	ldrb	r3, [r7, #9]
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	b21b      	sxth	r3, r3
 8000768:	4313      	orrs	r3, r2
 800076a:	b21b      	sxth	r3, r3
 800076c:	817b      	strh	r3, [r7, #10]
    return raw * 360.0f / 16384.0f;
 800076e:	897b      	ldrh	r3, [r7, #10]
 8000770:	ee07 3a90 	vmov	s15, r3
 8000774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000778:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000798 <AS5048B_GetAngleDegrees+0x80>
 800077c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000780:	eddf 6a06 	vldr	s13, [pc, #24]	@ 800079c <AS5048B_GetAngleDegrees+0x84>
 8000784:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8000788:	eef0 7a47 	vmov.f32	s15, s14
 800078c:	eeb0 0a67 	vmov.f32	s0, s15
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	43b40000 	.word	0x43b40000
 800079c:	46800000 	.word	0x46800000

080007a0 <AS5048B_CheckDiagnostics>:
    return (sens->registers.magnitude_high << 6) | sens->registers.magnitude_low;
}

uint8_t AS5048B_CheckDiagnostics(AS5048B_Driver_t *driver,
                                  uint8_t num_encoder)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
    AS5048B_UpdateRegisters(driver, num_encoder);
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	4619      	mov	r1, r3
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff26 	bl	8000602 <AS5048B_UpdateRegisters>
    return driver->devices[num_encoder].registers.diagnostics;
 80007b6:	78fa      	ldrb	r2, [r7, #3]
 80007b8:	6879      	ldr	r1, [r7, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4413      	add	r3, r2
 80007c4:	440b      	add	r3, r1
 80007c6:	7a1b      	ldrb	r3, [r3, #8]
 80007c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80007cc:	b2db      	uxtb	r3, r3
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
	...

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007de:	f001 f831 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e2:	f000 f8e1 	bl	80009a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e6:	f000 fad1 	bl	8000d8c <MX_GPIO_Init>
  MX_SPI1_Init();
 80007ea:	f000 f973 	bl	8000ad4 <MX_SPI1_Init>
  MX_TIM3_Init();
 80007ee:	f000 fa7f 	bl	8000cf0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80007f2:	f000 f9a7 	bl	8000b44 <MX_TIM1_Init>
  MX_TIM2_Init();
 80007f6:	f000 f9e1 	bl	8000bbc <MX_TIM2_Init>
  MX_I2C1_Init();
 80007fa:	f000 f93d 	bl	8000a78 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  PID_Init(&PID0,
 80007fe:	eeb5 4a00 	vmov.f32	s8, #80	@ 0x3e800000  0.250
 8000802:	eddf 3a5d 	vldr	s7, [pc, #372]	@ 8000978 <main+0x1a0>
 8000806:	ed9f 3a5c 	vldr	s6, [pc, #368]	@ 8000978 <main+0x1a0>
 800080a:	eddf 2a5b 	vldr	s5, [pc, #364]	@ 8000978 <main+0x1a0>
 800080e:	ed9f 2a5a 	vldr	s4, [pc, #360]	@ 8000978 <main+0x1a0>
 8000812:	eddf 1a59 	vldr	s3, [pc, #356]	@ 8000978 <main+0x1a0>
 8000816:	ed9f 1a58 	vldr	s2, [pc, #352]	@ 8000978 <main+0x1a0>
 800081a:	eddf 0a57 	vldr	s1, [pc, #348]	@ 8000978 <main+0x1a0>
 800081e:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8000978 <main+0x1a0>
 8000822:	4856      	ldr	r0, [pc, #344]	@ (800097c <main+0x1a4>)
 8000824:	f000 fd13 	bl	800124e <PID_Init>
  		  0, 	//limMIN
  		  0, 	//limMAX
  		  0, 	//limMinInt
  		  0, 	//limMaxInt
	  0.250);	// tsample
  PID_Init(&PID1,
 8000828:	eeb5 4a00 	vmov.f32	s8, #80	@ 0x3e800000  0.250
 800082c:	eddf 3a52 	vldr	s7, [pc, #328]	@ 8000978 <main+0x1a0>
 8000830:	ed9f 3a51 	vldr	s6, [pc, #324]	@ 8000978 <main+0x1a0>
 8000834:	eddf 2a50 	vldr	s5, [pc, #320]	@ 8000978 <main+0x1a0>
 8000838:	ed9f 2a4f 	vldr	s4, [pc, #316]	@ 8000978 <main+0x1a0>
 800083c:	eddf 1a4e 	vldr	s3, [pc, #312]	@ 8000978 <main+0x1a0>
 8000840:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 8000978 <main+0x1a0>
 8000844:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8000978 <main+0x1a0>
 8000848:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8000978 <main+0x1a0>
 800084c:	484c      	ldr	r0, [pc, #304]	@ (8000980 <main+0x1a8>)
 800084e:	f000 fcfe 	bl	800124e <PID_Init>
		  0, 	//limMIN
		  0, 	//limMAX
		  0, 	//limMinInt
		  0, 	//limMaxInt
  	  0.250);	// tsample
  PID_Init(&PID2,
 8000852:	eeb5 4a00 	vmov.f32	s8, #80	@ 0x3e800000  0.250
 8000856:	eddf 3a48 	vldr	s7, [pc, #288]	@ 8000978 <main+0x1a0>
 800085a:	ed9f 3a47 	vldr	s6, [pc, #284]	@ 8000978 <main+0x1a0>
 800085e:	eddf 2a46 	vldr	s5, [pc, #280]	@ 8000978 <main+0x1a0>
 8000862:	ed9f 2a45 	vldr	s4, [pc, #276]	@ 8000978 <main+0x1a0>
 8000866:	eddf 1a44 	vldr	s3, [pc, #272]	@ 8000978 <main+0x1a0>
 800086a:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 8000978 <main+0x1a0>
 800086e:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8000978 <main+0x1a0>
 8000872:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8000978 <main+0x1a0>
 8000876:	4843      	ldr	r0, [pc, #268]	@ (8000984 <main+0x1ac>)
 8000878:	f000 fce9 	bl	800124e <PID_Init>
		  0, 	//limMinInt
		  0, 	//limMaxInt
  	  0.250);	// tsample

  	// Themocuples initialization
	MAX6675_Init(&tempSensors, &hspi1);
 800087c:	4942      	ldr	r1, [pc, #264]	@ (8000988 <main+0x1b0>)
 800087e:	4843      	ldr	r0, [pc, #268]	@ (800098c <main+0x1b4>)
 8000880:	f000 fb2e 	bl	8000ee0 <MAX6675_Init>
	MAX6675_AddDevice(&tempSensors, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	4841      	ldr	r0, [pc, #260]	@ (800098c <main+0x1b4>)
 8000888:	f000 fb8c 	bl	8000fa4 <MAX6675_AddDevice>
	MAX6675_AddDevice(&tempSensors, 1);
 800088c:	2101      	movs	r1, #1
 800088e:	483f      	ldr	r0, [pc, #252]	@ (800098c <main+0x1b4>)
 8000890:	f000 fb88 	bl	8000fa4 <MAX6675_AddDevice>
	MAX6675_AddDevice(&tempSensors, 2);
 8000894:	2102      	movs	r1, #2
 8000896:	483d      	ldr	r0, [pc, #244]	@ (800098c <main+0x1b4>)
 8000898:	f000 fb84 	bl	8000fa4 <MAX6675_AddDevice>
	MAX6675_AddDevice(&tempSensors, 3);
 800089c:	2103      	movs	r1, #3
 800089e:	483b      	ldr	r0, [pc, #236]	@ (800098c <main+0x1b4>)
 80008a0:	f000 fb80 	bl	8000fa4 <MAX6675_AddDevice>
	HAL_TIM_Base_Start_IT(&htim3);
 80008a4:	483a      	ldr	r0, [pc, #232]	@ (8000990 <main+0x1b8>)
 80008a6:	f003 fd39 	bl	800431c <HAL_TIM_Base_Start_IT>

	// Magnetic encoders initialization
	AS5048B_Init(&encoderSensors, &hi2c1);
 80008aa:	493a      	ldr	r1, [pc, #232]	@ (8000994 <main+0x1bc>)
 80008ac:	483a      	ldr	r0, [pc, #232]	@ (8000998 <main+0x1c0>)
 80008ae:	f7ff fe57 	bl	8000560 <AS5048B_Init>
	AS5048B_AddDevice(&encoderSensors, 0, 0X40);
 80008b2:	2240      	movs	r2, #64	@ 0x40
 80008b4:	2100      	movs	r1, #0
 80008b6:	4838      	ldr	r0, [pc, #224]	@ (8000998 <main+0x1c0>)
 80008b8:	f7ff fe6c 	bl	8000594 <AS5048B_AddDevice>
	AS5048B_AddDevice(&encoderSensors, 1, 0X41);
 80008bc:	2241      	movs	r2, #65	@ 0x41
 80008be:	2101      	movs	r1, #1
 80008c0:	4835      	ldr	r0, [pc, #212]	@ (8000998 <main+0x1c0>)
 80008c2:	f7ff fe67 	bl	8000594 <AS5048B_AddDevice>
	//find_dev_id_address(&encoderSensors);
	AS5048B_CheckDiagnostics(&encoderSensors, 0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	4833      	ldr	r0, [pc, #204]	@ (8000998 <main+0x1c0>)
 80008ca:	f7ff ff69 	bl	80007a0 <AS5048B_CheckDiagnostics>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// Check bti0 for temperature sensing and PIDs feedback-input updates
	if (timers_isr & 0x01) {
 80008ce:	4b33      	ldr	r3, [pc, #204]	@ (800099c <main+0x1c4>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d044      	beq.n	8000964 <main+0x18c>
		timers_isr &= ~0x01;
 80008da:	4b30      	ldr	r3, [pc, #192]	@ (800099c <main+0x1c4>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	f023 0301 	bic.w	r3, r3, #1
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <main+0x1c4>)
 80008e6:	701a      	strb	r2, [r3, #0]

		// Sample temperatures
		for (uint8_t sensor = 0; sensor < 3; sensor++) {
 80008e8:	2300      	movs	r3, #0
 80008ea:	71fb      	strb	r3, [r7, #7]
 80008ec:	e007      	b.n	80008fe <main+0x126>
			// Individual max6675 sensor's reading
			MAX6675_ReadTemperature(&tempSensors, sensor);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4619      	mov	r1, r3
 80008f2:	4826      	ldr	r0, [pc, #152]	@ (800098c <main+0x1b4>)
 80008f4:	f000 fba6 	bl	8001044 <MAX6675_ReadTemperature>
		for (uint8_t sensor = 0; sensor < 3; sensor++) {
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	3301      	adds	r3, #1
 80008fc:	71fb      	strb	r3, [r7, #7]
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b02      	cmp	r3, #2
 8000902:	d9f4      	bls.n	80008ee <main+0x116>
			//HAL_Delay(1); // HAL_Delay(250); // Waits for Chip Ready(according to Datasheet, the max time for conversion is 220ms)
		}
		// Take each measurements and compute chamber's temperature
		for (uint8_t sensor = 0; sensor < 3; sensor++) {
 8000904:	2300      	movs	r3, #0
 8000906:	71bb      	strb	r3, [r7, #6]
 8000908:	e00b      	b.n	8000922 <main+0x14a>
			MAX6675_GetTemperature(&tempSensors, sensor, tempReadings + sensor);
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4a24      	ldr	r2, [pc, #144]	@ (80009a0 <main+0x1c8>)
 8000910:	441a      	add	r2, r3
 8000912:	79bb      	ldrb	r3, [r7, #6]
 8000914:	4619      	mov	r1, r3
 8000916:	481d      	ldr	r0, [pc, #116]	@ (800098c <main+0x1b4>)
 8000918:	f000 fc68 	bl	80011ec <MAX6675_GetTemperature>
		for (uint8_t sensor = 0; sensor < 3; sensor++) {
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	3301      	adds	r3, #1
 8000920:	71bb      	strb	r3, [r7, #6]
 8000922:	79bb      	ldrb	r3, [r7, #6]
 8000924:	2b02      	cmp	r3, #2
 8000926:	d9f0      	bls.n	800090a <main+0x132>
		}
		// Update PIDs
		PID_Update(&PID0, 0, tempReadings[0]);
 8000928:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <main+0x1c8>)
 800092a:	edd3 7a00 	vldr	s15, [r3]
 800092e:	eef0 0a67 	vmov.f32	s1, s15
 8000932:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8000978 <main+0x1a0>
 8000936:	4811      	ldr	r0, [pc, #68]	@ (800097c <main+0x1a4>)
 8000938:	f000 fcd4 	bl	80012e4 <PID_Update>
		PID_Update(&PID1, 0, tempReadings[1]);
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <main+0x1c8>)
 800093e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000942:	eef0 0a67 	vmov.f32	s1, s15
 8000946:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8000978 <main+0x1a0>
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <main+0x1a8>)
 800094c:	f000 fcca 	bl	80012e4 <PID_Update>
		PID_Update(&PID2, 0, tempReadings[2]);
 8000950:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <main+0x1c8>)
 8000952:	edd3 7a02 	vldr	s15, [r3, #8]
 8000956:	eef0 0a67 	vmov.f32	s1, s15
 800095a:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8000978 <main+0x1a0>
 800095e:	4809      	ldr	r0, [pc, #36]	@ (8000984 <main+0x1ac>)
 8000960:	f000 fcc0 	bl	80012e4 <PID_Update>
	}

	// HEATERS

	// MOTORS
	angleReadings[0] = AS5048B_GetAngleDegrees(&encoderSensors, 0);
 8000964:	2100      	movs	r1, #0
 8000966:	480c      	ldr	r0, [pc, #48]	@ (8000998 <main+0x1c0>)
 8000968:	f7ff fed6 	bl	8000718 <AS5048B_GetAngleDegrees>
 800096c:	eef0 7a40 	vmov.f32	s15, s0
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <main+0x1cc>)
 8000972:	edc3 7a00 	vstr	s15, [r3]
	if (timers_isr & 0x01) {
 8000976:	e7aa      	b.n	80008ce <main+0xf6>
 8000978:	00000000 	.word	0x00000000
 800097c:	200001ac 	.word	0x200001ac
 8000980:	200001e4 	.word	0x200001e4
 8000984:	2000021c 	.word	0x2000021c
 8000988:	2000007c 	.word	0x2000007c
 800098c:	20000264 	.word	0x20000264
 8000990:	20000164 	.word	0x20000164
 8000994:	20000028 	.word	0x20000028
 8000998:	200002bc 	.word	0x200002bc
 800099c:	20000254 	.word	0x20000254
 80009a0:	20000258 	.word	0x20000258
 80009a4:	200002b4 	.word	0x200002b4

080009a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b094      	sub	sp, #80	@ 0x50
 80009ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	f107 0320 	add.w	r3, r7, #32
 80009b2:	2230      	movs	r2, #48	@ 0x30
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f004 fc00 	bl	80051bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009bc:	f107 030c 	add.w	r3, r7, #12
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <SystemClock_Config+0xc8>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	4a26      	ldr	r2, [pc, #152]	@ (8000a70 <SystemClock_Config+0xc8>)
 80009d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009da:	6413      	str	r3, [r2, #64]	@ 0x40
 80009dc:	4b24      	ldr	r3, [pc, #144]	@ (8000a70 <SystemClock_Config+0xc8>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e8:	2300      	movs	r3, #0
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	4b21      	ldr	r3, [pc, #132]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a20      	ldr	r2, [pc, #128]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009f6:	6013      	str	r3, [r2, #0]
 80009f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <SystemClock_Config+0xcc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a0c:	2310      	movs	r3, #16
 8000a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a14:	2300      	movs	r3, #0
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a1c:	2364      	movs	r3, #100	@ 0x64
 8000a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a24:	2304      	movs	r3, #4
 8000a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 0320 	add.w	r3, r7, #32
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 fb53 	bl	80030d8 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a38:	f000 fa4c 	bl	8000ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2302      	movs	r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2103      	movs	r1, #3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 fdb5 	bl	80035c8 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a64:	f000 fa36 	bl	8000ed4 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3750      	adds	r7, #80	@ 0x50
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <MX_I2C1_Init+0x50>)
 8000a7e:	4a13      	ldr	r2, [pc, #76]	@ (8000acc <MX_I2C1_Init+0x54>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <MX_I2C1_Init+0x50>)
 8000a84:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <MX_I2C1_Init+0x58>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <MX_I2C1_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 128;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac8 <MX_I2C1_Init+0x50>)
 8000a90:	2280      	movs	r2, #128	@ 0x80
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <MX_I2C1_Init+0x50>)
 8000a96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <MX_I2C1_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <MX_I2C1_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <MX_I2C1_Init+0x50>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <MX_I2C1_Init+0x50>)
 8000ab0:	2280      	movs	r2, #128	@ 0x80
 8000ab2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	@ (8000ac8 <MX_I2C1_Init+0x50>)
 8000ab6:	f001 f9e7 	bl	8001e88 <HAL_I2C_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac0:	f000 fa08 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000028 	.word	0x20000028
 8000acc:	40005400 	.word	0x40005400
 8000ad0:	000186a0 	.word	0x000186a0

08000ad4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000ada:	4a19      	ldr	r2, [pc, #100]	@ (8000b40 <MX_SPI1_Init+0x6c>)
 8000adc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ade:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000ae0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ae4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000ae8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000af0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000af4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000b04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b08:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000b0c:	2238      	movs	r2, #56	@ 0x38
 8000b0e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000b24:	220a      	movs	r2, #10
 8000b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_SPI1_Init+0x68>)
 8000b2a:	f002 ff19 	bl	8003960 <HAL_SPI_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8000b34:	f000 f9ce 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000007c 	.word	0x2000007c
 8000b40:	40013000 	.word	0x40013000

08000b44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b52:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <MX_TIM1_Init+0x70>)
 8000b54:	4a18      	ldr	r2, [pc, #96]	@ (8000bb8 <MX_TIM1_Init+0x74>)
 8000b56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <MX_TIM1_Init+0x70>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <MX_TIM1_Init+0x70>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b64:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_TIM1_Init+0x70>)
 8000b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_TIM1_Init+0x70>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b72:	4b10      	ldr	r3, [pc, #64]	@ (8000bb4 <MX_TIM1_Init+0x70>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b78:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_TIM1_Init+0x70>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8000b7e:	2108      	movs	r1, #8
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <MX_TIM1_Init+0x70>)
 8000b82:	f003 fc86 	bl	8004492 <HAL_TIM_OnePulse_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0x4c>
  {
    Error_Handler();
 8000b8c:	f000 f9a2 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_TIM1_Init+0x70>)
 8000b9e:	f004 fa8b 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000ba8:	f000 f994 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000d4 	.word	0x200000d4
 8000bb8:	40010000 	.word	0x40010000

08000bbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b092      	sub	sp, #72	@ 0x48
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bea:	463b      	mov	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	615a      	str	r2, [r3, #20]
 8000bfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000bfe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8000c04:	4b39      	ldr	r3, [pc, #228]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000c06:	2263      	movs	r2, #99	@ 0x63
 8000c08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b38      	ldr	r3, [pc, #224]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8300-1;
 8000c10:	4b36      	ldr	r3, [pc, #216]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000c12:	f242 026b 	movw	r2, #8299	@ 0x206b
 8000c16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b34      	ldr	r3, [pc, #208]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c1e:	4b33      	ldr	r3, [pc, #204]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000c20:	2280      	movs	r2, #128	@ 0x80
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c24:	4831      	ldr	r0, [pc, #196]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000c26:	f003 fb29 	bl	800427c <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c30:	f000 f950 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c38:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c3e:	4619      	mov	r1, r3
 8000c40:	482a      	ldr	r0, [pc, #168]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000c42:	f003 fdc3 	bl	80047cc <HAL_TIM_ConfigClockSource>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c4c:	f000 f942 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000c50:	4826      	ldr	r0, [pc, #152]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000c52:	f003 fbc5 	bl	80043e0 <HAL_TIM_OC_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000c5c:	f000 f93a 	bl	8000ed4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000c60:	2108      	movs	r1, #8
 8000c62:	4822      	ldr	r0, [pc, #136]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000c64:	f003 fc15 	bl	8004492 <HAL_TIM_OnePulse_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000c6e:	f000 f931 	bl	8000ed4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000c72:	2306      	movs	r3, #6
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8000c76:	2360      	movs	r3, #96	@ 0x60
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.TriggerFilter = 15;
 8000c7e:	230f      	movs	r3, #15
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4818      	ldr	r0, [pc, #96]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000c8a:	f003 fe66 	bl	800495a <HAL_TIM_SlaveConfigSynchro>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000c94:	f000 f91e 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4811      	ldr	r0, [pc, #68]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000ca8:	f004 fa06 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000cb2:	f000 f90f 	bl	8000ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 100;
 8000cba:	2364      	movs	r3, #100	@ 0x64
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4807      	ldr	r0, [pc, #28]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000cce:	f003 fd21 	bl	8004714 <HAL_TIM_OC_ConfigChannel>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 8000cd8:	f000 f8fc 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cdc:	4803      	ldr	r0, [pc, #12]	@ (8000cec <MX_TIM2_Init+0x130>)
 8000cde:	f000 fd03 	bl	80016e8 <HAL_TIM_MspPostInit>

}
 8000ce2:	bf00      	nop
 8000ce4:	3748      	adds	r7, #72	@ 0x48
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000011c 	.word	0x2000011c

08000cf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8000d88 <MX_TIM3_Init+0x98>)
 8000d10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d14:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500-1;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d22:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000d26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d30:	2280      	movs	r2, #128	@ 0x80
 8000d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d34:	4813      	ldr	r0, [pc, #76]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d36:	f003 faa1 	bl	800427c <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d40:	f000 f8c8 	bl	8000ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d4a:	f107 0308 	add.w	r3, r7, #8
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d52:	f003 fd3b 	bl	80047cc <HAL_TIM_ConfigClockSource>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d5c:	f000 f8ba 	bl	8000ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_TIM3_Init+0x94>)
 8000d6e:	f004 f9a3 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d78:	f000 f8ac 	bl	8000ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000164 	.word	0x20000164
 8000d88:	40000400 	.word	0x40000400

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b3a      	ldr	r3, [pc, #232]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a39      	ldr	r2, [pc, #228]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b37      	ldr	r3, [pc, #220]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b33      	ldr	r3, [pc, #204]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a32      	ldr	r2, [pc, #200]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b30      	ldr	r3, [pc, #192]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b2c      	ldr	r3, [pc, #176]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a2b      	ldr	r2, [pc, #172]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b29      	ldr	r3, [pc, #164]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	4b25      	ldr	r3, [pc, #148]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	4a24      	ldr	r2, [pc, #144]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e06:	4b22      	ldr	r3, [pc, #136]	@ (8000e90 <MX_GPIO_Init+0x104>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(built_in_led_GPIO_Port, built_in_led_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e18:	481e      	ldr	r0, [pc, #120]	@ (8000e94 <MX_GPIO_Init+0x108>)
 8000e1a:	f001 f81b 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_0_GPIO_Port, CS_0_Pin, GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	2180      	movs	r1, #128	@ 0x80
 8000e22:	481d      	ldr	r0, [pc, #116]	@ (8000e98 <MX_GPIO_Init+0x10c>)
 8000e24:	f001 f816 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_1_Pin|CS_2_Pin|CS_3_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2107      	movs	r1, #7
 8000e2c:	481b      	ldr	r0, [pc, #108]	@ (8000e9c <MX_GPIO_Init+0x110>)
 8000e2e:	f001 f811 	bl	8001e54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : built_in_led_Pin */
  GPIO_InitStruct.Pin = built_in_led_Pin;
 8000e32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(built_in_led_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4812      	ldr	r0, [pc, #72]	@ (8000e94 <MX_GPIO_Init+0x108>)
 8000e4c:	f000 fe7e 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_0_Pin */
  GPIO_InitStruct.Pin = CS_0_Pin;
 8000e50:	2380      	movs	r3, #128	@ 0x80
 8000e52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_0_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <MX_GPIO_Init+0x10c>)
 8000e68:	f000 fe70 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_1_Pin CS_2_Pin CS_3_Pin */
  GPIO_InitStruct.Pin = CS_1_Pin|CS_2_Pin|CS_3_Pin;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e70:	2301      	movs	r3, #1
 8000e72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <MX_GPIO_Init+0x110>)
 8000e84:	f000 fe62 	bl	8001b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	@ 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020800 	.word	0x40020800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ISR
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d106      	bne.n	8000ebe <HAL_TIM_PeriodElapsedCallback+0x1e>
		timers_isr |= 0x01;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	}
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000164 	.word	0x20000164
 8000ed0:	20000254 	.word	0x20000254

08000ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed8:	b672      	cpsid	i
}
 8000eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <Error_Handler+0x8>

08000ee0 <MAX6675_Init>:
 * @param driver Pointer to driver control structure
 * @param hspi   Pointer to the SPI handle for communication
 * @return HAL_StatusTypeDef HAL_OK if successful, HAL_ERROR otherwise
 */
HAL_StatusTypeDef MAX6675_Init(MAX6675_Driver_t *driver, SPI_HandleTypeDef *hspi)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b08b      	sub	sp, #44	@ 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
    /* Validate input parameters */
    if (driver == NULL || hspi == NULL) {
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <MAX6675_Init+0x16>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <MAX6675_Init+0x1a>
        return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e04b      	b.n	8000f92 <MAX6675_Init+0xb2>
    }

    /* Initialize driver structure */
    driver->hspi = hspi;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	635a      	str	r2, [r3, #52]	@ 0x34
    driver->device_count = 0;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Define CS port array */
    GPIO_TypeDef* cs_ports[] = MAX6675_CS_PORTS;
 8000f08:	4b24      	ldr	r3, [pc, #144]	@ (8000f9c <MAX6675_Init+0xbc>)
 8000f0a:	f107 0414 	add.w	r4, r7, #20
 8000f0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t cs_pins[] = MAX6675_CS_PINS;
 8000f14:	4a22      	ldr	r2, [pc, #136]	@ (8000fa0 <MAX6675_Init+0xc0>)
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f1e:	e883 0003 	stmia.w	r3, {r0, r1}

    /* Copy CS port/pin information to driver structure */
    for (uint8_t i = 0; i < MAX6675_MAX_DEVICES; i++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f28:	e02e      	b.n	8000f88 <MAX6675_Init+0xa8>
        driver->cs_ports[i] = cs_ports[i];
 8000f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f2e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	3328      	adds	r3, #40	@ 0x28
 8000f36:	443b      	add	r3, r7
 8000f38:	f853 1c14 	ldr.w	r1, [r3, #-20]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	320e      	adds	r2, #14
 8000f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        driver->cs_pins[i] = cs_pins[i];
 8000f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f48:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	3328      	adds	r3, #40	@ 0x28
 8000f50:	443b      	add	r3, r7
 8000f52:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3224      	adds	r2, #36	@ 0x24
 8000f5a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        /* Set all CS pins high (inactive) */
        HAL_GPIO_WritePin(driver->cs_ports[i], driver->cs_pins[i], GPIO_PIN_SET);
 8000f5e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	320e      	adds	r2, #14
 8000f66:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000f6a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3224      	adds	r2, #36	@ 0x24
 8000f72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f76:	2201      	movs	r2, #1
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f000 ff6b 	bl	8001e54 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < MAX6675_MAX_DEVICES; i++) {
 8000f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f82:	3301      	adds	r3, #1
 8000f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d9cc      	bls.n	8000f2a <MAX6675_Init+0x4a>
    }

    return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	372c      	adds	r7, #44	@ 0x2c
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	0800522c 	.word	0x0800522c
 8000fa0:	0800523c 	.word	0x0800523c

08000fa4 <MAX6675_AddDevice>:
 * @param driver    Pointer to driver control structure
 * @param device_id Device ID (0-3) corresponding to CS pin index
 * @return HAL_StatusTypeDef HAL_OK if successful, HAL_ERROR otherwise
 */
HAL_StatusTypeDef MAX6675_AddDevice(MAX6675_Driver_t *driver, uint8_t device_id)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
    /* Validate input parameters */
    if (driver == NULL || device_id >= MAX6675_MAX_DEVICES) {
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <MAX6675_AddDevice+0x18>
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d901      	bls.n	8000fc0 <MAX6675_AddDevice+0x1c>
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e03c      	b.n	800103a <MAX6675_AddDevice+0x96>
    }

    /* Check if we have room for more devices */
    if (driver->device_count >= MAX6675_MAX_DEVICES) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d901      	bls.n	8000fce <MAX6675_AddDevice+0x2a>
        return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e035      	b.n	800103a <MAX6675_AddDevice+0x96>
    }

    /* Initialize device structure */
    driver->devices[device_id].id = device_id;
 8000fce:	78fa      	ldrb	r2, [r7, #3]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	78fa      	ldrb	r2, [r7, #3]
 8000fde:	701a      	strb	r2, [r3, #0]
    driver->devices[device_id].raw_data = 0;
 8000fe0:	78fa      	ldrb	r2, [r7, #3]
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	3302      	adds	r3, #2
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	801a      	strh	r2, [r3, #0]
    driver->devices[device_id].temperature = 0.0f;
 8000ff4:	78fa      	ldrb	r2, [r7, #3]
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	440b      	add	r3, r1
 8001002:	3304      	adds	r3, #4
 8001004:	f04f 0200 	mov.w	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
    driver->devices[device_id].is_connected = 0;
 800100a:	78fa      	ldrb	r2, [r7, #3]
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	440b      	add	r3, r1
 8001018:	3308      	adds	r3, #8
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]

    /* Increment device count */
    driver->device_count++;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001024:	3301      	adds	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Validate device communication by reading temperature */
    return MAX6675_ReadTemperature(driver, device_id);
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	4619      	mov	r1, r3
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f806 	bl	8001044 <MAX6675_ReadTemperature>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <MAX6675_ReadTemperature>:
 * @param driver    Pointer to driver control structure
 * @param device_id Device ID (0-3) to read from
 * @return HAL_StatusTypeDef HAL_OK if successful, HAL_ERROR otherwise
 */
HAL_StatusTypeDef MAX6675_ReadTemperature(MAX6675_Driver_t *driver, uint8_t device_id)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	75fb      	strb	r3, [r7, #23]
    uint16_t raw_temp = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	81fb      	strh	r3, [r7, #14]
    uint8_t data[2] = {0};  /* Buffer for raw data from MAX6675 */
 8001058:	2300      	movs	r3, #0
 800105a:	81bb      	strh	r3, [r7, #12]

    /* Validate input parameters */
    if (driver == NULL || device_id >= MAX6675_MAX_DEVICES) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <MAX6675_ReadTemperature+0x24>
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	2b03      	cmp	r3, #3
 8001066:	d901      	bls.n	800106c <MAX6675_ReadTemperature+0x28>
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0b8      	b.n	80011de <MAX6675_ReadTemperature+0x19a>
    }

    /* Begin SPI communication sequence */
    HAL_GPIO_WritePin(
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	320e      	adds	r2, #14
 8001072:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001076:	78fa      	ldrb	r2, [r7, #3]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3224      	adds	r2, #36	@ 0x24
 800107c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	f000 fee6 	bl	8001e54 <HAL_GPIO_WritePin>
        driver->cs_pins[device_id],
        GPIO_PIN_RESET
    ); /* Assert CS (active low) */

    /* Read (16 bits) from the MAX6675 */
    status = HAL_SPI_Receive(driver->hspi, data, 1, 50);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800108c:	f107 010c 	add.w	r1, r7, #12
 8001090:	2332      	movs	r3, #50	@ 0x32
 8001092:	2201      	movs	r2, #1
 8001094:	f002 fced 	bl	8003a72 <HAL_SPI_Receive>
 8001098:	4603      	mov	r3, r0
 800109a:	75fb      	strb	r3, [r7, #23]

    /* End SPI communication sequence */
    HAL_GPIO_WritePin(
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	320e      	adds	r2, #14
 80010a2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3224      	adds	r2, #36	@ 0x24
 80010ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4619      	mov	r1, r3
 80010b4:	f000 fece 	bl	8001e54 <HAL_GPIO_WritePin>
        driver->cs_pins[device_id],
        GPIO_PIN_SET
    ); /* Deassert CS */

    // NEEDED TO MAKE SURE CLOCK SETS HIGH-IDLE AND SLAVE MISO GOES HI-Z
    for (int i = 0; i < 25; i++) __NOP();
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	e003      	b.n	80010c6 <MAX6675_ReadTemperature+0x82>
 80010be:	bf00      	nop
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	3301      	adds	r3, #1
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	2b18      	cmp	r3, #24
 80010ca:	ddf8      	ble.n	80010be <MAX6675_ReadTemperature+0x7a>

    /* Check if SPI communication was successful */
    if (status != HAL_OK) {
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <MAX6675_ReadTemperature+0xa6>
        driver->devices[device_id].is_connected = 0;
 80010d2:	78fa      	ldrb	r2, [r7, #3]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	3308      	adds	r3, #8
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
        return status;
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	e079      	b.n	80011de <MAX6675_ReadTemperature+0x19a>
    }

    /* Combine the two bytes into a 16-bit value */
    driver->devices[device_id].raw_data = (data[1] << 8) | data[0];
 80010ea:	7b7b      	ldrb	r3, [r7, #13]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	7b3b      	ldrb	r3, [r7, #12]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	78fa      	ldrb	r2, [r7, #3]
 80010fc:	b298      	uxth	r0, r3
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	3302      	adds	r3, #2
 800110c:	4602      	mov	r2, r0
 800110e:	801a      	strh	r2, [r3, #0]
     * Verify device integrity by checking:
     * 1. Thermocouple input bit (should be 0 if connected)
     * 2. Dummy bit (should be 0 for proper operation)
     * 3. Full zeros??? ambient's temperature is present
     */
    if ((((driver->devices[device_id].raw_data & MAX6675_INPUT_BIT) >> 2) ==
 8001110:	78fa      	ldrb	r2, [r7, #3]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	3302      	adds	r3, #2
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	109b      	asrs	r3, r3, #2
 8001124:	f003 0101 	and.w	r1, r3, #1
        ((driver->devices[device_id].raw_data & MAX6675_DUMMY_BIT) >> 15)) &&
 8001128:	78fa      	ldrb	r2, [r7, #3]
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4403      	add	r3, r0
 8001136:	3302      	adds	r3, #2
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	0bdb      	lsrs	r3, r3, #15
 800113c:	b29b      	uxth	r3, r3
    if ((((driver->devices[device_id].raw_data & MAX6675_INPUT_BIT) >> 2) ==
 800113e:	4299      	cmp	r1, r3
 8001140:	d136      	bne.n	80011b0 <MAX6675_ReadTemperature+0x16c>
        (driver->devices[device_id].raw_data != 0x0000)) {
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	440b      	add	r3, r1
 8001150:	3302      	adds	r3, #2
 8001152:	881b      	ldrh	r3, [r3, #0]
        ((driver->devices[device_id].raw_data & MAX6675_DUMMY_BIT) >> 15)) &&
 8001154:	2b00      	cmp	r3, #0
 8001156:	d02b      	beq.n	80011b0 <MAX6675_ReadTemperature+0x16c>

        /* Extract temperature data (12-bit value shifted right by 3) */
        raw_temp = (driver->devices[device_id].raw_data & MAX6675_TEMP_BITS) >> 3;
 8001158:	78fa      	ldrb	r2, [r7, #3]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3302      	adds	r3, #2
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	10db      	asrs	r3, r3, #3
 800116c:	b29b      	uxth	r3, r3
 800116e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001172:	81fb      	strh	r3, [r7, #14]

        /* Convert to Celsius (0.25°C per count) */
        driver->devices[device_id].temperature = raw_temp * MAX6675_TEMP_FACTOR;
 8001174:	89fb      	ldrh	r3, [r7, #14]
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117e:	78fa      	ldrb	r2, [r7, #3]
 8001180:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 8001184:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	3304      	adds	r3, #4
 8001196:	edc3 7a00 	vstr	s15, [r3]
        driver->devices[device_id].is_connected = 1;
 800119a:	78fa      	ldrb	r2, [r7, #3]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	3308      	adds	r3, #8
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	e015      	b.n	80011dc <MAX6675_ReadTemperature+0x198>
    } else {
        /* No thermocouple detected or communication error */
        driver->devices[device_id].temperature = -404.0;
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	3304      	adds	r3, #4
 80011c0:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <MAX6675_ReadTemperature+0x1a4>)
 80011c2:	601a      	str	r2, [r3, #0]
        driver->devices[device_id].is_connected = 0;
 80011c4:	78fa      	ldrb	r2, [r7, #3]
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	3308      	adds	r3, #8
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
        status = HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	75fb      	strb	r3, [r7, #23]
    }

    return status;
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	c3ca0000 	.word	0xc3ca0000

080011ec <MAX6675_GetTemperature>:
 * @param device_id   Device ID (0-3) to get temperature from
 * @param temperature Pointer to store the temperature value
 * @return HAL_StatusTypeDef HAL_OK if successful, HAL_ERROR otherwise
 */
HAL_StatusTypeDef MAX6675_GetTemperature(MAX6675_Driver_t *driver, uint8_t device_id, float *temperature)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	460b      	mov	r3, r1
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	72fb      	strb	r3, [r7, #11]
    /* Validate input parameters */
    if (driver == NULL || device_id >= MAX6675_MAX_DEVICES || temperature == NULL) {
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <MAX6675_GetTemperature+0x20>
 8001200:	7afb      	ldrb	r3, [r7, #11]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d802      	bhi.n	800120c <MAX6675_GetTemperature+0x20>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <MAX6675_GetTemperature+0x24>
        return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e018      	b.n	8001242 <MAX6675_GetTemperature+0x56>
    }

    /* Check if device is connected */
    if (!driver->devices[device_id].is_connected) {
 8001210:	7afa      	ldrb	r2, [r7, #11]
 8001212:	68f9      	ldr	r1, [r7, #12]
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	440b      	add	r3, r1
 800121e:	3308      	adds	r3, #8
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <MAX6675_GetTemperature+0x3e>
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00b      	b.n	8001242 <MAX6675_GetTemperature+0x56>
    }

    /* Get temperature value */
    *temperature = driver->devices[device_id].temperature;
 800122a:	7afa      	ldrb	r2, [r7, #11]
 800122c:	68f9      	ldr	r1, [r7, #12]
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	3304      	adds	r3, #4
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <PID_Init>:
void PID_Init(PIDController* pid, float kp, float ki, float kd,
              float tau,
              float limMin, float limMax,
              float limMinInt, float limMaxInt,
              float t)
{
 800124e:	b480      	push	{r7}
 8001250:	b08b      	sub	sp, #44	@ 0x2c
 8001252:	af00      	add	r7, sp, #0
 8001254:	6278      	str	r0, [r7, #36]	@ 0x24
 8001256:	ed87 0a08 	vstr	s0, [r7, #32]
 800125a:	edc7 0a07 	vstr	s1, [r7, #28]
 800125e:	ed87 1a06 	vstr	s2, [r7, #24]
 8001262:	edc7 1a05 	vstr	s3, [r7, #20]
 8001266:	ed87 2a04 	vstr	s4, [r7, #16]
 800126a:	edc7 2a03 	vstr	s5, [r7, #12]
 800126e:	ed87 3a02 	vstr	s6, [r7, #8]
 8001272:	edc7 3a01 	vstr	s7, [r7, #4]
 8001276:	ed87 4a00 	vstr	s8, [r7]
    // Initialize PID gains (proportional, integral, derivative)
    pid->Kp = kp;
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	6a3a      	ldr	r2, [r7, #32]
 800127e:	601a      	str	r2, [r3, #0]
    pid->Ki = ki;
 8001280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	605a      	str	r2, [r3, #4]
    pid->Kd = kd;
 8001286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	609a      	str	r2, [r3, #8]

    // Low-pass filter time constant (for the derivative)
    pid->tau = tau;
 800128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	60da      	str	r2, [r3, #12]

    // Controller output limits
    pid->limMin = limMin;
 8001292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	611a      	str	r2, [r3, #16]
    pid->limMax = limMax;
 8001298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	615a      	str	r2, [r3, #20]

    // Integrator limits (wind-up prevention)
    pid->limMinInt = limMinInt;
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	619a      	str	r2, [r3, #24]
    pid->limMaxInt = limMaxInt;
 80012a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	61da      	str	r2, [r3, #28]

    // Sampling time (time interval between updates)
    pid->T = t;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	621a      	str	r2, [r3, #32]

    // Initialize integrator (accumulates error)
    pid->integrator = 0.0f;
 80012b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24

    // Initialize previous error (for derivative calculation)
    pid->prevError = 0.0f;
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	@ 0x28

    // Initialize differentiator (for derivative term)
    pid->differentiator = 0.0f;
 80012c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Initialize previous measurement (for derivative calculation)
    pid->prevMeasurement = 0.0f;
 80012c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize controller output
    pid->out = 0.0f;
 80012d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012d8:	bf00      	nop
 80012da:	372c      	adds	r7, #44	@ 0x2c
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <PID_Update>:
    pid->out = 0.0f;             // Reset output
}

// Function that updates the PID controller each time it is called
float PID_Update(PIDController* pid, float setpoint, float measurement)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80012f0:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculate error (difference between setpoint and measurement)
    float error = setpoint - measurement;
 80012f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001300:	edc7 7a05 	vstr	s15, [r7, #20]

    // Calculate proportional term (Kp * error)
    float proportional = pid->Kp * error;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	ed97 7a05 	vldr	s14, [r7, #20]
 800130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001312:	edc7 7a04 	vstr	s15, [r7, #16]

    // Calculate integral term (integration of error)
    pid->integrator += 0.5f * pid->Ki * pid->T * (error + pid->prevError); // Trapezoidal integration method (average sum of errors)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001322:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001326:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001330:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	ed93 6a0a 	vldr	s12, [r3, #40]	@ 0x28
 800133a:	edd7 7a05 	vldr	s15, [r7, #20]
 800133e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Anti-windup: Limit the integrator value to prevent excessive error accumulation
    if (pid->integrator > pid->limMaxInt)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	edd3 7a07 	vldr	s15, [r3, #28]
 800135c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001364:	dd04      	ble.n	8001370 <PID_Update+0x8c>
    {
        pid->integrator = pid->limMaxInt; // Limit integrator to maximum allowed value
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	69da      	ldr	r2, [r3, #28]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24
 800136e:	e00e      	b.n	800138e <PID_Update+0xaa>
    }
    else if (pid->integrator < pid->limMinInt)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	edd3 7a06 	vldr	s15, [r3, #24]
 800137c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	d503      	bpl.n	800138e <PID_Update+0xaa>
    {
        pid->integrator = pid->limMinInt; // Limit integrator to minimum allowed value
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    // Calculate derivative term (with low-pass filter to avoid noise)
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) +
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	edd3 7a02 	vldr	s15, [r3, #8]
 8001394:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800139e:	edd7 6a01 	vldr	s13, [r7, #4]
 80013a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013a6:	ee27 7a27 	vmul.f32	s14, s14, s15
                         (2.0f * pid->tau - pid->T) * pid->differentiator) /
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80013b0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80013ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) +
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	eef1 6a67 	vneg.f32	s13, s15
                         (2.0f * pid->tau + pid->T);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80013d6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80013e0:	ee37 7a27 	vadd.f32	s14, s14, s15
                         (2.0f * pid->tau - pid->T) * pid->differentiator) /
 80013e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement) +
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate total controller output (Sum of proportional, integral, and derivative)
    pid->out = proportional + pid->integrator + pid->differentiator;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80013f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80013f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    // Apply limits to the output (controller output must be within defined limits)
    if (pid->out > pid->limMax)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	edd3 7a05 	vldr	s15, [r3, #20]
 8001418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800141c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001420:	dd04      	ble.n	800142c <PID_Update+0x148>
    {
        pid->out = pid->limMax; // Limit output to maximum
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34
 800142a:	e00e      	b.n	800144a <PID_Update+0x166>
    }
    else if (pid->out < pid->limMin)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	edd3 7a04 	vldr	s15, [r3, #16]
 8001438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800143c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001440:	d503      	bpl.n	800144a <PID_Update+0x166>
    {
        pid->out = pid->limMin; // Limit output to minimum
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	691a      	ldr	r2, [r3, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    // Update controller memory (errors and previous measurements for the next cycle)
    pid->prevError = error;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->prevMeasurement = measurement;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	631a      	str	r2, [r3, #48]	@ 0x30

    // Return controller output (how much the controlled variable should be adjusted)
    return pid->out;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	4a0f      	ldr	r2, [pc, #60]	@ (80014b8 <HAL_MspInit+0x4c>)
 800147c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001480:	6453      	str	r3, [r2, #68]	@ 0x44
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_MspInit+0x4c>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	@ 0x40
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a19      	ldr	r2, [pc, #100]	@ (8001540 <HAL_I2C_MspInit+0x84>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d12b      	bne.n	8001536 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <HAL_I2C_MspInit+0x88>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a17      	ldr	r2, [pc, #92]	@ (8001544 <HAL_I2C_MspInit+0x88>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <HAL_I2C_MspInit+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014fa:	23c0      	movs	r3, #192	@ 0xc0
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800150a:	2304      	movs	r3, #4
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	480c      	ldr	r0, [pc, #48]	@ (8001548 <HAL_I2C_MspInit+0x8c>)
 8001516:	f000 fb19 	bl	8001b4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_I2C_MspInit+0x88>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <HAL_I2C_MspInit+0x88>)
 8001524:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_I2C_MspInit+0x88>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	@ 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40005400 	.word	0x40005400
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400

0800154c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	@ 0x28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <HAL_SPI_MspInit+0x84>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d12b      	bne.n	80015c6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <HAL_SPI_MspInit+0x88>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a17      	ldr	r2, [pc, #92]	@ (80015d4 <HAL_SPI_MspInit+0x88>)
 8001578:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <HAL_SPI_MspInit+0x88>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001586:	613b      	str	r3, [r7, #16]
 8001588:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <HAL_SPI_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a10      	ldr	r2, [pc, #64]	@ (80015d4 <HAL_SPI_MspInit+0x88>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <HAL_SPI_MspInit+0x88>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015a6:	2360      	movs	r3, #96	@ 0x60
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015b6:	2305      	movs	r3, #5
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f107 0314 	add.w	r3, r7, #20
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <HAL_SPI_MspInit+0x8c>)
 80015c2:	f000 fac3 	bl	8001b4c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015c6:	bf00      	nop
 80015c8:	3728      	adds	r7, #40	@ 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40013000 	.word	0x40013000
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000

080015dc <HAL_TIM_OnePulse_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_onepulse: TIM_OnePulse handle pointer
  * @retval None
  */
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001618 <HAL_TIM_OnePulse_MspInit+0x3c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d10d      	bne.n	800160a <HAL_TIM_OnePulse_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_TIM_OnePulse_MspInit+0x40>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	4a09      	ldr	r2, [pc, #36]	@ (800161c <HAL_TIM_OnePulse_MspInit+0x40>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fe:	4b07      	ldr	r3, [pc, #28]	@ (800161c <HAL_TIM_OnePulse_MspInit+0x40>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800160a:	bf00      	nop
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	40010000 	.word	0x40010000
 800161c:	40023800 	.word	0x40023800

08001620 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001640:	d12c      	bne.n	800169c <HAL_TIM_Base_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <HAL_TIM_Base_MspInit+0xbc>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4a24      	ldr	r2, [pc, #144]	@ (80016dc <HAL_TIM_Base_MspInit+0xbc>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6413      	str	r3, [r2, #64]	@ 0x40
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <HAL_TIM_Base_MspInit+0xbc>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b1e      	ldr	r3, [pc, #120]	@ (80016dc <HAL_TIM_Base_MspInit+0xbc>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a1d      	ldr	r2, [pc, #116]	@ (80016dc <HAL_TIM_Base_MspInit+0xbc>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <HAL_TIM_Base_MspInit+0xbc>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = zero_crossig_Pin;
 800167a:	2302      	movs	r3, #2
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800168a:	2301      	movs	r3, #1
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(zero_crossig_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <HAL_TIM_Base_MspInit+0xc0>)
 8001696:	f000 fa59 	bl	8001b4c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800169a:	e01a      	b.n	80016d2 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a10      	ldr	r2, [pc, #64]	@ (80016e4 <HAL_TIM_Base_MspInit+0xc4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d115      	bne.n	80016d2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <HAL_TIM_Base_MspInit+0xbc>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	4a0b      	ldr	r2, [pc, #44]	@ (80016dc <HAL_TIM_Base_MspInit+0xbc>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <HAL_TIM_Base_MspInit+0xbc>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	201d      	movs	r0, #29
 80016c8:	f000 fa09 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016cc:	201d      	movs	r0, #29
 80016ce:	f000 fa22 	bl	8001b16 <HAL_NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	@ 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40000400 	.word	0x40000400

080016e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001708:	d11d      	bne.n	8001746 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <HAL_TIM_MspPostInit+0x68>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a0f      	ldr	r2, [pc, #60]	@ (8001750 <HAL_TIM_MspPostInit+0x68>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <HAL_TIM_MspPostInit+0x68>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = fire_Pin;
 8001726:	2301      	movs	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001736:	2301      	movs	r3, #1
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(fire_GPIO_Port, &GPIO_InitStruct);
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4619      	mov	r1, r3
 8001740:	4804      	ldr	r0, [pc, #16]	@ (8001754 <HAL_TIM_MspPostInit+0x6c>)
 8001742:	f000 fa03 	bl	8001b4c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800175c:	bf00      	nop
 800175e:	e7fd      	b.n	800175c <NMI_Handler+0x4>

08001760 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001764:	bf00      	nop
 8001766:	e7fd      	b.n	8001764 <HardFault_Handler+0x4>

08001768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800176c:	bf00      	nop
 800176e:	e7fd      	b.n	800176c <MemManage_Handler+0x4>

08001770 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001774:	bf00      	nop
 8001776:	e7fd      	b.n	8001774 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <UsageFault_Handler+0x4>

08001780 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ae:	f000 f89b 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017bc:	4802      	ldr	r0, [pc, #8]	@ (80017c8 <TIM3_IRQHandler+0x10>)
 80017be:	f002 feb8 	bl	8004532 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000164 	.word	0x20000164

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001828 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f4:	f7ff ffea 	bl	80017cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f8:	480c      	ldr	r0, [pc, #48]	@ (800182c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017fa:	490d      	ldr	r1, [pc, #52]	@ (8001830 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001810:	4c0a      	ldr	r4, [pc, #40]	@ (800183c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181e:	f003 fcd5 	bl	80051cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7fe ffd9 	bl	80007d8 <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001834:	0800526c 	.word	0x0800526c
  ldr r2, =_sbss
 8001838:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800183c:	200002dc 	.word	0x200002dc

08001840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f92b 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fdf8 	bl	800146c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f943 	bl	8001b32 <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018c4:	f000 f90b 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	@ (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	@ (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000008 	.word	0x20000008
 800190c:	200002d8 	.word	0x200002d8

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200002d8 	.word	0x200002d8

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	@ (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	@ (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff29 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff3e 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff31 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	@ 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e159      	b.n	8001e1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 8148 	bne.w	8001e16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d005      	beq.n	8001b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d130      	bne.n	8001c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0201 	and.w	r2, r3, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d017      	beq.n	8001c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d123      	bne.n	8001c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a2 	beq.w	8001e16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b57      	ldr	r3, [pc, #348]	@ (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a56      	ldr	r2, [pc, #344]	@ (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b54      	ldr	r3, [pc, #336]	@ (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cee:	4a52      	ldr	r2, [pc, #328]	@ (8001e38 <HAL_GPIO_Init+0x2ec>)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a49      	ldr	r2, [pc, #292]	@ (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x202>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a48      	ldr	r2, [pc, #288]	@ (8001e40 <HAL_GPIO_Init+0x2f4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x1fe>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a47      	ldr	r2, [pc, #284]	@ (8001e44 <HAL_GPIO_Init+0x2f8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x1fa>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a46      	ldr	r2, [pc, #280]	@ (8001e48 <HAL_GPIO_Init+0x2fc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x1f6>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a45      	ldr	r2, [pc, #276]	@ (8001e4c <HAL_GPIO_Init+0x300>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x1f2>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e008      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d3e:	2307      	movs	r3, #7
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e004      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	f002 0203 	and.w	r2, r2, #3
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	4093      	lsls	r3, r2
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d60:	4935      	ldr	r1, [pc, #212]	@ (8001e38 <HAL_GPIO_Init+0x2ec>)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6e:	4b38      	ldr	r3, [pc, #224]	@ (8001e50 <HAL_GPIO_Init+0x304>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d92:	4a2f      	ldr	r2, [pc, #188]	@ (8001e50 <HAL_GPIO_Init+0x304>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d98:	4b2d      	ldr	r3, [pc, #180]	@ (8001e50 <HAL_GPIO_Init+0x304>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dbc:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <HAL_GPIO_Init+0x304>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dc2:	4b23      	ldr	r3, [pc, #140]	@ (8001e50 <HAL_GPIO_Init+0x304>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e50 <HAL_GPIO_Init+0x304>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dec:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <HAL_GPIO_Init+0x304>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e10:	4a0f      	ldr	r2, [pc, #60]	@ (8001e50 <HAL_GPIO_Init+0x304>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	f67f aea2 	bls.w	8001b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3724      	adds	r7, #36	@ 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40013800 	.word	0x40013800
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	40020400 	.word	0x40020400
 8001e44:	40020800 	.word	0x40020800
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40013c00 	.word	0x40013c00

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e70:	e003      	b.n	8001e7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	041a      	lsls	r2, r3, #16
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	619a      	str	r2, [r3, #24]
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e12b      	b.n	80020f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fb04 	bl	80014bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2224      	movs	r2, #36	@ 0x24
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001eec:	f001 fd24 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8001ef0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	4a81      	ldr	r2, [pc, #516]	@ (80020fc <HAL_I2C_Init+0x274>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d807      	bhi.n	8001f0c <HAL_I2C_Init+0x84>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4a80      	ldr	r2, [pc, #512]	@ (8002100 <HAL_I2C_Init+0x278>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	bf94      	ite	ls
 8001f04:	2301      	movls	r3, #1
 8001f06:	2300      	movhi	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	e006      	b.n	8001f1a <HAL_I2C_Init+0x92>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4a7d      	ldr	r2, [pc, #500]	@ (8002104 <HAL_I2C_Init+0x27c>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	bf94      	ite	ls
 8001f14:	2301      	movls	r3, #1
 8001f16:	2300      	movhi	r3, #0
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e0e7      	b.n	80020f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4a78      	ldr	r2, [pc, #480]	@ (8002108 <HAL_I2C_Init+0x280>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	0c9b      	lsrs	r3, r3, #18
 8001f2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a6a      	ldr	r2, [pc, #424]	@ (80020fc <HAL_I2C_Init+0x274>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d802      	bhi.n	8001f5c <HAL_I2C_Init+0xd4>
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	e009      	b.n	8001f70 <HAL_I2C_Init+0xe8>
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	4a69      	ldr	r2, [pc, #420]	@ (800210c <HAL_I2C_Init+0x284>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	099b      	lsrs	r3, r3, #6
 8001f6e:	3301      	adds	r3, #1
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6812      	ldr	r2, [r2, #0]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f82:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	495c      	ldr	r1, [pc, #368]	@ (80020fc <HAL_I2C_Init+0x274>)
 8001f8c:	428b      	cmp	r3, r1
 8001f8e:	d819      	bhi.n	8001fc4 <HAL_I2C_Init+0x13c>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1e59      	subs	r1, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f9e:	1c59      	adds	r1, r3, #1
 8001fa0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fa4:	400b      	ands	r3, r1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_I2C_Init+0x138>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1e59      	subs	r1, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fbe:	e051      	b.n	8002064 <HAL_I2C_Init+0x1dc>
 8001fc0:	2304      	movs	r3, #4
 8001fc2:	e04f      	b.n	8002064 <HAL_I2C_Init+0x1dc>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d111      	bne.n	8001ff0 <HAL_I2C_Init+0x168>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1e58      	subs	r0, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	440b      	add	r3, r1
 8001fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf0c      	ite	eq
 8001fe8:	2301      	moveq	r3, #1
 8001fea:	2300      	movne	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	e012      	b.n	8002016 <HAL_I2C_Init+0x18e>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	1e58      	subs	r0, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	0099      	lsls	r1, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	fbb0 f3f3 	udiv	r3, r0, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_I2C_Init+0x196>
 800201a:	2301      	movs	r3, #1
 800201c:	e022      	b.n	8002064 <HAL_I2C_Init+0x1dc>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10e      	bne.n	8002044 <HAL_I2C_Init+0x1bc>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	1e58      	subs	r0, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6859      	ldr	r1, [r3, #4]
 800202e:	460b      	mov	r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	440b      	add	r3, r1
 8002034:	fbb0 f3f3 	udiv	r3, r0, r3
 8002038:	3301      	adds	r3, #1
 800203a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002042:	e00f      	b.n	8002064 <HAL_I2C_Init+0x1dc>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1e58      	subs	r0, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	460b      	mov	r3, r1
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	0099      	lsls	r1, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	fbb0 f3f3 	udiv	r3, r0, r3
 800205a:	3301      	adds	r3, #1
 800205c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002060:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	6809      	ldr	r1, [r1, #0]
 8002068:	4313      	orrs	r3, r2
 800206a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69da      	ldr	r2, [r3, #28]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002092:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6911      	ldr	r1, [r2, #16]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	68d2      	ldr	r2, [r2, #12]
 800209e:	4311      	orrs	r1, r2
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6812      	ldr	r2, [r2, #0]
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695a      	ldr	r2, [r3, #20]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0201 	orr.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	000186a0 	.word	0x000186a0
 8002100:	001e847f 	.word	0x001e847f
 8002104:	003d08ff 	.word	0x003d08ff
 8002108:	431bde83 	.word	0x431bde83
 800210c:	10624dd3 	.word	0x10624dd3

08002110 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af02      	add	r7, sp, #8
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	461a      	mov	r2, r3
 800211c:	460b      	mov	r3, r1
 800211e:	817b      	strh	r3, [r7, #10]
 8002120:	4613      	mov	r3, r2
 8002122:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002124:	f7ff fbf4 	bl	8001910 <HAL_GetTick>
 8002128:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b20      	cmp	r3, #32
 8002134:	f040 80e0 	bne.w	80022f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2319      	movs	r3, #25
 800213e:	2201      	movs	r2, #1
 8002140:	4970      	ldr	r1, [pc, #448]	@ (8002304 <HAL_I2C_Master_Transmit+0x1f4>)
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fd92 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800214e:	2302      	movs	r3, #2
 8002150:	e0d3      	b.n	80022fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_I2C_Master_Transmit+0x50>
 800215c:	2302      	movs	r3, #2
 800215e:	e0cc      	b.n	80022fa <HAL_I2C_Master_Transmit+0x1ea>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d007      	beq.n	8002186 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002194:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2221      	movs	r2, #33	@ 0x21
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2210      	movs	r2, #16
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	893a      	ldrh	r2, [r7, #8]
 80021b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	4a50      	ldr	r2, [pc, #320]	@ (8002308 <HAL_I2C_Master_Transmit+0x1f8>)
 80021c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021c8:	8979      	ldrh	r1, [r7, #10]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	6a3a      	ldr	r2, [r7, #32]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fbfc 	bl	80029cc <I2C_MasterRequestWrite>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e08d      	b.n	80022fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021f4:	e066      	b.n	80022c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	6a39      	ldr	r1, [r7, #32]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fe50 	bl	8002ea0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	2b04      	cmp	r3, #4
 800220c:	d107      	bne.n	800221e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800221c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e06b      	b.n	80022fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800223c:	b29b      	uxth	r3, r3
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b04      	cmp	r3, #4
 800225e:	d11b      	bne.n	8002298 <HAL_I2C_Master_Transmit+0x188>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	d017      	beq.n	8002298 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	6a39      	ldr	r1, [r7, #32]
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fe47 	bl	8002f30 <I2C_WaitOnBTFFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00d      	beq.n	80022c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d107      	bne.n	80022c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e01a      	b.n	80022fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d194      	bne.n	80021f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	00100002 	.word	0x00100002
 8002308:	ffff0000 	.word	0xffff0000

0800230c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	@ 0x30
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	461a      	mov	r2, r3
 8002318:	460b      	mov	r3, r1
 800231a:	817b      	strh	r3, [r7, #10]
 800231c:	4613      	mov	r3, r2
 800231e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002320:	f7ff faf6 	bl	8001910 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b20      	cmp	r3, #32
 8002330:	f040 8217 	bne.w	8002762 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2319      	movs	r3, #25
 800233a:	2201      	movs	r2, #1
 800233c:	497c      	ldr	r1, [pc, #496]	@ (8002530 <HAL_I2C_Master_Receive+0x224>)
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fc94 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800234a:	2302      	movs	r3, #2
 800234c:	e20a      	b.n	8002764 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_I2C_Master_Receive+0x50>
 8002358:	2302      	movs	r3, #2
 800235a:	e203      	b.n	8002764 <HAL_I2C_Master_Receive+0x458>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b01      	cmp	r3, #1
 8002370:	d007      	beq.n	8002382 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002390:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2222      	movs	r2, #34	@ 0x22
 8002396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2210      	movs	r2, #16
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	893a      	ldrh	r2, [r7, #8]
 80023b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002534 <HAL_I2C_Master_Receive+0x228>)
 80023c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023c4:	8979      	ldrh	r1, [r7, #10]
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fb80 	bl	8002ad0 <I2C_MasterRequestRead>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e1c4      	b.n	8002764 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d113      	bne.n	800240a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e198      	b.n	800273c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240e:	2b01      	cmp	r3, #1
 8002410:	d11b      	bne.n	800244a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002420:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e178      	b.n	800273c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244e:	2b02      	cmp	r3, #2
 8002450:	d11b      	bne.n	800248a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002460:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	e158      	b.n	800273c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024b0:	e144      	b.n	800273c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	f200 80f1 	bhi.w	800269e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d123      	bne.n	800250c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fd79 	bl	8002fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e145      	b.n	8002764 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800250a:	e117      	b.n	800273c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002510:	2b02      	cmp	r3, #2
 8002512:	d14e      	bne.n	80025b2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	2200      	movs	r2, #0
 800251c:	4906      	ldr	r1, [pc, #24]	@ (8002538 <HAL_I2C_Master_Receive+0x22c>)
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fba4 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e11a      	b.n	8002764 <HAL_I2C_Master_Receive+0x458>
 800252e:	bf00      	nop
 8002530:	00100002 	.word	0x00100002
 8002534:	ffff0000 	.word	0xffff0000
 8002538:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800254a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259a:	3b01      	subs	r3, #1
 800259c:	b29a      	uxth	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80025b0:	e0c4      	b.n	800273c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b8:	2200      	movs	r2, #0
 80025ba:	496c      	ldr	r1, [pc, #432]	@ (800276c <HAL_I2C_Master_Receive+0x460>)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fb55 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0cb      	b.n	8002764 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002614:	2200      	movs	r2, #0
 8002616:	4955      	ldr	r1, [pc, #340]	@ (800276c <HAL_I2C_Master_Receive+0x460>)
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fb27 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e09d      	b.n	8002764 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800269c:	e04e      	b.n	800273c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800269e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fc8c 	bl	8002fc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e058      	b.n	8002764 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	691a      	ldr	r2, [r3, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d124      	bne.n	800273c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d107      	bne.n	800270a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002708:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002732:	b29b      	uxth	r3, r3
 8002734:	3b01      	subs	r3, #1
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	f47f aeb6 	bne.w	80024b2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
  }
}
 8002764:	4618      	mov	r0, r3
 8002766:	3728      	adds	r7, #40	@ 0x28
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	00010004 	.word	0x00010004

08002770 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	@ 0x28
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	460b      	mov	r3, r1
 800277e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002780:	f7ff f8c6 	bl	8001910 <HAL_GetTick>
 8002784:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b20      	cmp	r3, #32
 8002794:	f040 8111 	bne.w	80029ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2319      	movs	r3, #25
 800279e:	2201      	movs	r2, #1
 80027a0:	4988      	ldr	r1, [pc, #544]	@ (80029c4 <HAL_I2C_IsDeviceReady+0x254>)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fa62 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	e104      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_I2C_IsDeviceReady+0x50>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0fd      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d007      	beq.n	80027e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2224      	movs	r2, #36	@ 0x24
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a70      	ldr	r2, [pc, #448]	@ (80029c8 <HAL_I2C_IsDeviceReady+0x258>)
 8002808:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002818:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 fa20 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002840:	d103      	bne.n	800284a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0b6      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800285c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800285e:	f7ff f857 	bl	8001910 <HAL_GetTick>
 8002862:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	bf0c      	ite	eq
 8002872:	2301      	moveq	r3, #1
 8002874:	2300      	movne	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002892:	e025      	b.n	80028e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002894:	f7ff f83c 	bl	8001910 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d302      	bcc.n	80028aa <HAL_I2C_IsDeviceReady+0x13a>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	22a0      	movs	r2, #160	@ 0xa0
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b02      	cmp	r3, #2
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80028ea:	d005      	beq.n	80028f8 <HAL_I2C_IsDeviceReady+0x188>
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <HAL_I2C_IsDeviceReady+0x188>
 80028f2:	7dbb      	ldrb	r3, [r7, #22]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0cd      	beq.n	8002894 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b02      	cmp	r3, #2
 800290c:	d129      	bne.n	8002962 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2319      	movs	r3, #25
 800293a:	2201      	movs	r2, #1
 800293c:	4921      	ldr	r1, [pc, #132]	@ (80029c4 <HAL_I2C_IsDeviceReady+0x254>)
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f994 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e036      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e02c      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002970:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800297a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	2319      	movs	r3, #25
 8002982:	2201      	movs	r2, #1
 8002984:	490f      	ldr	r1, [pc, #60]	@ (80029c4 <HAL_I2C_IsDeviceReady+0x254>)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f970 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e012      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	3301      	adds	r3, #1
 800299a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	f4ff af32 	bcc.w	800280a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80029ba:	2302      	movs	r3, #2
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	00100002 	.word	0x00100002
 80029c8:	ffff0000 	.word	0xffff0000

080029cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af02      	add	r7, sp, #8
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	460b      	mov	r3, r1
 80029da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d006      	beq.n	80029f6 <I2C_MasterRequestWrite+0x2a>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d003      	beq.n	80029f6 <I2C_MasterRequestWrite+0x2a>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029f4:	d108      	bne.n	8002a08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a04:	601a      	str	r2, [r3, #0]
 8002a06:	e00b      	b.n	8002a20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	2b12      	cmp	r3, #18
 8002a0e:	d107      	bne.n	8002a20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f91d 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00d      	beq.n	8002a54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a46:	d103      	bne.n	8002a50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e035      	b.n	8002ac0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a5c:	d108      	bne.n	8002a70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a5e:	897b      	ldrh	r3, [r7, #10]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a6c:	611a      	str	r2, [r3, #16]
 8002a6e:	e01b      	b.n	8002aa8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a70:	897b      	ldrh	r3, [r7, #10]
 8002a72:	11db      	asrs	r3, r3, #7
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 0306 	and.w	r3, r3, #6
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f063 030f 	orn	r3, r3, #15
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	490e      	ldr	r1, [pc, #56]	@ (8002ac8 <I2C_MasterRequestWrite+0xfc>)
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 f966 	bl	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e010      	b.n	8002ac0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a9e:	897b      	ldrh	r3, [r7, #10]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4907      	ldr	r1, [pc, #28]	@ (8002acc <I2C_MasterRequestWrite+0x100>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f956 	bl	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	00010008 	.word	0x00010008
 8002acc:	00010002 	.word	0x00010002

08002ad0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	460b      	mov	r3, r1
 8002ade:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002af4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d006      	beq.n	8002b0a <I2C_MasterRequestRead+0x3a>
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d003      	beq.n	8002b0a <I2C_MasterRequestRead+0x3a>
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b08:	d108      	bne.n	8002b1c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e00b      	b.n	8002b34 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	2b11      	cmp	r3, #17
 8002b22:	d107      	bne.n	8002b34 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f893 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00d      	beq.n	8002b68 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b5a:	d103      	bne.n	8002b64 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e079      	b.n	8002c5c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b70:	d108      	bne.n	8002b84 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b72:	897b      	ldrh	r3, [r7, #10]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	611a      	str	r2, [r3, #16]
 8002b82:	e05f      	b.n	8002c44 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b84:	897b      	ldrh	r3, [r7, #10]
 8002b86:	11db      	asrs	r3, r3, #7
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f003 0306 	and.w	r3, r3, #6
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f063 030f 	orn	r3, r3, #15
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	4930      	ldr	r1, [pc, #192]	@ (8002c64 <I2C_MasterRequestRead+0x194>)
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f8dc 	bl	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e054      	b.n	8002c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bb2:	897b      	ldrh	r3, [r7, #10]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4929      	ldr	r1, [pc, #164]	@ (8002c68 <I2C_MasterRequestRead+0x198>)
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 f8cc 	bl	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e044      	b.n	8002c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f831 	bl	8002c6c <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c1e:	d103      	bne.n	8002c28 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c26:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e017      	b.n	8002c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	11db      	asrs	r3, r3, #7
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f003 0306 	and.w	r3, r3, #6
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f063 030e 	orn	r3, r3, #14
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4907      	ldr	r1, [pc, #28]	@ (8002c68 <I2C_MasterRequestRead+0x198>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f888 	bl	8002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	00010008 	.word	0x00010008
 8002c68:	00010002 	.word	0x00010002

08002c6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7c:	e048      	b.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c84:	d044      	beq.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe fe43 	bl	8001910 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d139      	bne.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	0c1b      	lsrs	r3, r3, #16
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d10d      	bne.n	8002cc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	43da      	mvns	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	e00c      	b.n	8002cdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d116      	bne.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	f043 0220 	orr.w	r2, r3, #32
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e023      	b.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	0c1b      	lsrs	r3, r3, #16
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d10d      	bne.n	8002d36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	43da      	mvns	r2, r3
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	4013      	ands	r3, r2
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	e00c      	b.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	43da      	mvns	r2, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4013      	ands	r3, r2
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	461a      	mov	r2, r3
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d093      	beq.n	8002c7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d6e:	e071      	b.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d7e:	d123      	bne.n	8002dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db4:	f043 0204 	orr.w	r2, r3, #4
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e067      	b.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dce:	d041      	beq.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd0:	f7fe fd9e 	bl	8001910 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d302      	bcc.n	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d136      	bne.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	0c1b      	lsrs	r3, r3, #16
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d10c      	bne.n	8002e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	bf14      	ite	ne
 8002e02:	2301      	movne	r3, #1
 8002e04:	2300      	moveq	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	e00b      	b.n	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	43da      	mvns	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e40:	f043 0220 	orr.w	r2, r3, #32
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e021      	b.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	0c1b      	lsrs	r3, r3, #16
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d10c      	bne.n	8002e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	43da      	mvns	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf14      	ite	ne
 8002e70:	2301      	movne	r3, #1
 8002e72:	2300      	moveq	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e00b      	b.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f47f af6d 	bne.w	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eac:	e034      	b.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f8e3 	bl	800307a <I2C_IsAcknowledgeFailed>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e034      	b.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ec4:	d028      	beq.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fe fd23 	bl	8001910 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11d      	bne.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee6:	2b80      	cmp	r3, #128	@ 0x80
 8002ee8:	d016      	beq.n	8002f18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e007      	b.n	8002f28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f22:	2b80      	cmp	r3, #128	@ 0x80
 8002f24:	d1c3      	bne.n	8002eae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f3c:	e034      	b.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f89b 	bl	800307a <I2C_IsAcknowledgeFailed>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e034      	b.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f54:	d028      	beq.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fe fcdb 	bl	8001910 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d11d      	bne.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d016      	beq.n	8002fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	f043 0220 	orr.w	r2, r3, #32
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e007      	b.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d1c3      	bne.n	8002f3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fcc:	e049      	b.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d119      	bne.n	8003010 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0210 	mvn.w	r2, #16
 8002fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e030      	b.n	8003072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003010:	f7fe fc7e 	bl	8001910 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	429a      	cmp	r2, r3
 800301e:	d302      	bcc.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11d      	bne.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d016      	beq.n	8003062 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f043 0220 	orr.w	r2, r3, #32
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e007      	b.n	8003072 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306c:	2b40      	cmp	r3, #64	@ 0x40
 800306e:	d1ae      	bne.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800308c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003090:	d11b      	bne.n	80030ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800309a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f043 0204 	orr.w	r2, r3, #4
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e267      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d075      	beq.n	80031e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030f6:	4b88      	ldr	r3, [pc, #544]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d00c      	beq.n	800311c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b85      	ldr	r3, [pc, #532]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800310a:	2b08      	cmp	r3, #8
 800310c:	d112      	bne.n	8003134 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310e:	4b82      	ldr	r3, [pc, #520]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800311a:	d10b      	bne.n	8003134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800311c:	4b7e      	ldr	r3, [pc, #504]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d05b      	beq.n	80031e0 <HAL_RCC_OscConfig+0x108>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d157      	bne.n	80031e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e242      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800313c:	d106      	bne.n	800314c <HAL_RCC_OscConfig+0x74>
 800313e:	4b76      	ldr	r3, [pc, #472]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a75      	ldr	r2, [pc, #468]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e01d      	b.n	8003188 <HAL_RCC_OscConfig+0xb0>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003154:	d10c      	bne.n	8003170 <HAL_RCC_OscConfig+0x98>
 8003156:	4b70      	ldr	r3, [pc, #448]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6f      	ldr	r2, [pc, #444]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800315c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	4b6d      	ldr	r3, [pc, #436]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a6c      	ldr	r2, [pc, #432]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003168:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e00b      	b.n	8003188 <HAL_RCC_OscConfig+0xb0>
 8003170:	4b69      	ldr	r3, [pc, #420]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a68      	ldr	r2, [pc, #416]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003176:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b66      	ldr	r3, [pc, #408]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a65      	ldr	r2, [pc, #404]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d013      	beq.n	80031b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fe fbbe 	bl	8001910 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7fe fbba 	bl	8001910 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	@ 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e207      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f0      	beq.n	8003198 <HAL_RCC_OscConfig+0xc0>
 80031b6:	e014      	b.n	80031e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b8:	f7fe fbaa 	bl	8001910 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe fba6 	bl	8001910 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	@ 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e1f3      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031d2:	4b51      	ldr	r3, [pc, #324]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f0      	bne.n	80031c0 <HAL_RCC_OscConfig+0xe8>
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d063      	beq.n	80032b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ee:	4b4a      	ldr	r3, [pc, #296]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00b      	beq.n	8003212 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fa:	4b47      	ldr	r3, [pc, #284]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003202:	2b08      	cmp	r3, #8
 8003204:	d11c      	bne.n	8003240 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003206:	4b44      	ldr	r3, [pc, #272]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d116      	bne.n	8003240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003212:	4b41      	ldr	r3, [pc, #260]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_RCC_OscConfig+0x152>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d001      	beq.n	800322a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e1c7      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322a:	4b3b      	ldr	r3, [pc, #236]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4937      	ldr	r1, [pc, #220]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800323a:	4313      	orrs	r3, r2
 800323c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	e03a      	b.n	80032b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d020      	beq.n	800328a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003248:	4b34      	ldr	r3, [pc, #208]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7fe fb5f 	bl	8001910 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003256:	f7fe fb5b 	bl	8001910 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e1a8      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	4b2b      	ldr	r3, [pc, #172]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0f0      	beq.n	8003256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4925      	ldr	r1, [pc, #148]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 8003284:	4313      	orrs	r3, r2
 8003286:	600b      	str	r3, [r1, #0]
 8003288:	e015      	b.n	80032b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800328a:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_RCC_OscConfig+0x244>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fb3e 	bl	8001910 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003298:	f7fe fb3a 	bl	8001910 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e187      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d036      	beq.n	8003330 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ca:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <HAL_RCC_OscConfig+0x248>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe fb1e 	bl	8001910 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fe fb1a 	bl	8001910 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e167      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003318 <HAL_RCC_OscConfig+0x240>)
 80032ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x200>
 80032f6:	e01b      	b.n	8003330 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f8:	4b09      	ldr	r3, [pc, #36]	@ (8003320 <HAL_RCC_OscConfig+0x248>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032fe:	f7fe fb07 	bl	8001910 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003304:	e00e      	b.n	8003324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003306:	f7fe fb03 	bl	8001910 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d907      	bls.n	8003324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e150      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
 8003318:	40023800 	.word	0x40023800
 800331c:	42470000 	.word	0x42470000
 8003320:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003324:	4b88      	ldr	r3, [pc, #544]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ea      	bne.n	8003306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8097 	beq.w	800346c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003342:	4b81      	ldr	r3, [pc, #516]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10f      	bne.n	800336e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	4b7d      	ldr	r3, [pc, #500]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	4a7c      	ldr	r2, [pc, #496]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335c:	6413      	str	r3, [r2, #64]	@ 0x40
 800335e:	4b7a      	ldr	r3, [pc, #488]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800336a:	2301      	movs	r3, #1
 800336c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	4b77      	ldr	r3, [pc, #476]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003376:	2b00      	cmp	r3, #0
 8003378:	d118      	bne.n	80033ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800337a:	4b74      	ldr	r3, [pc, #464]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a73      	ldr	r2, [pc, #460]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003384:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003386:	f7fe fac3 	bl	8001910 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338e:	f7fe fabf 	bl	8001910 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e10c      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a0:	4b6a      	ldr	r3, [pc, #424]	@ (800354c <HAL_RCC_OscConfig+0x474>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f0      	beq.n	800338e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d106      	bne.n	80033c2 <HAL_RCC_OscConfig+0x2ea>
 80033b4:	4b64      	ldr	r3, [pc, #400]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	4a63      	ldr	r2, [pc, #396]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c0:	e01c      	b.n	80033fc <HAL_RCC_OscConfig+0x324>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d10c      	bne.n	80033e4 <HAL_RCC_OscConfig+0x30c>
 80033ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	4a5e      	ldr	r2, [pc, #376]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033d0:	f043 0304 	orr.w	r3, r3, #4
 80033d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033da:	4a5b      	ldr	r2, [pc, #364]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e2:	e00b      	b.n	80033fc <HAL_RCC_OscConfig+0x324>
 80033e4:	4b58      	ldr	r3, [pc, #352]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	4a57      	ldr	r2, [pc, #348]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f0:	4b55      	ldr	r3, [pc, #340]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f4:	4a54      	ldr	r2, [pc, #336]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f023 0304 	bic.w	r3, r3, #4
 80033fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d015      	beq.n	8003430 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fe fa84 	bl	8001910 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800340a:	e00a      	b.n	8003422 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340c:	f7fe fa80 	bl	8001910 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0cb      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003422:	4b49      	ldr	r3, [pc, #292]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003424:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d0ee      	beq.n	800340c <HAL_RCC_OscConfig+0x334>
 800342e:	e014      	b.n	800345a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003430:	f7fe fa6e 	bl	8001910 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003436:	e00a      	b.n	800344e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003438:	f7fe fa6a 	bl	8001910 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0b5      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800344e:	4b3e      	ldr	r3, [pc, #248]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1ee      	bne.n	8003438 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d105      	bne.n	800346c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003460:	4b39      	ldr	r3, [pc, #228]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	4a38      	ldr	r2, [pc, #224]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003466:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a1 	beq.w	80035b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003476:	4b34      	ldr	r3, [pc, #208]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d05c      	beq.n	800353c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d141      	bne.n	800350e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b31      	ldr	r3, [pc, #196]	@ (8003550 <HAL_RCC_OscConfig+0x478>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fe fa3e 	bl	8001910 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7fe fa3a 	bl	8001910 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e087      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	4b27      	ldr	r3, [pc, #156]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69da      	ldr	r2, [r3, #28]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	019b      	lsls	r3, r3, #6
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	085b      	lsrs	r3, r3, #1
 80034ce:	3b01      	subs	r3, #1
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	491b      	ldr	r1, [pc, #108]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003550 <HAL_RCC_OscConfig+0x478>)
 80034e2:	2201      	movs	r2, #1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e6:	f7fe fa13 	bl	8001910 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fe fa0f 	bl	8001910 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e05c      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003500:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x416>
 800350c:	e054      	b.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350e:	4b10      	ldr	r3, [pc, #64]	@ (8003550 <HAL_RCC_OscConfig+0x478>)
 8003510:	2200      	movs	r2, #0
 8003512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fe f9fc 	bl	8001910 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800351c:	f7fe f9f8 	bl	8001910 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e045      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800352e:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_RCC_OscConfig+0x470>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1f0      	bne.n	800351c <HAL_RCC_OscConfig+0x444>
 800353a:	e03d      	b.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d107      	bne.n	8003554 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e038      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	40007000 	.word	0x40007000
 8003550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_RCC_OscConfig+0x4ec>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d028      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d121      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d11a      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003584:	4013      	ands	r3, r2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800358a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800358c:	4293      	cmp	r3, r2
 800358e:	d111      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	085b      	lsrs	r3, r3, #1
 800359c:	3b01      	subs	r3, #1
 800359e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d001      	beq.n	80035b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800

080035c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0cc      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035dc:	4b68      	ldr	r3, [pc, #416]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d90c      	bls.n	8003604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ea:	4b65      	ldr	r3, [pc, #404]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	b2d2      	uxtb	r2, r2
 80035f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b63      	ldr	r3, [pc, #396]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0b8      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d020      	beq.n	8003652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800361c:	4b59      	ldr	r3, [pc, #356]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	4a58      	ldr	r2, [pc, #352]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003622:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003626:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003634:	4b53      	ldr	r3, [pc, #332]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	4a52      	ldr	r2, [pc, #328]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800363a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800363e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003640:	4b50      	ldr	r3, [pc, #320]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	494d      	ldr	r1, [pc, #308]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d044      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d107      	bne.n	8003676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	4b47      	ldr	r3, [pc, #284]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d119      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e07f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d003      	beq.n	8003686 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003686:	4b3f      	ldr	r3, [pc, #252]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e06f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003696:	4b3b      	ldr	r3, [pc, #236]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e067      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036a6:	4b37      	ldr	r3, [pc, #220]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f023 0203 	bic.w	r2, r3, #3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4934      	ldr	r1, [pc, #208]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036b8:	f7fe f92a 	bl	8001910 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fe f926 	bl	8001910 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e04f      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 020c 	and.w	r2, r3, #12
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d1eb      	bne.n	80036c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036e8:	4b25      	ldr	r3, [pc, #148]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d20c      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f6:	4b22      	ldr	r3, [pc, #136]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	b2d2      	uxtb	r2, r2
 80036fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	4b20      	ldr	r3, [pc, #128]	@ (8003780 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0307 	and.w	r3, r3, #7
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d001      	beq.n	8003710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e032      	b.n	8003776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800371c:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4916      	ldr	r1, [pc, #88]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d009      	beq.n	800374e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800373a:	4b12      	ldr	r3, [pc, #72]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	490e      	ldr	r1, [pc, #56]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800374e:	f000 f821 	bl	8003794 <HAL_RCC_GetSysClockFreq>
 8003752:	4602      	mov	r2, r0
 8003754:	4b0b      	ldr	r3, [pc, #44]	@ (8003784 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	490a      	ldr	r1, [pc, #40]	@ (8003788 <HAL_RCC_ClockConfig+0x1c0>)
 8003760:	5ccb      	ldrb	r3, [r1, r3]
 8003762:	fa22 f303 	lsr.w	r3, r2, r3
 8003766:	4a09      	ldr	r2, [pc, #36]	@ (800378c <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800376a:	4b09      	ldr	r3, [pc, #36]	@ (8003790 <HAL_RCC_ClockConfig+0x1c8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe f88a 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40023c00 	.word	0x40023c00
 8003784:	40023800 	.word	0x40023800
 8003788:	08005244 	.word	0x08005244
 800378c:	20000000 	.word	0x20000000
 8003790:	20000004 	.word	0x20000004

08003794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003798:	b090      	sub	sp, #64	@ 0x40
 800379a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037ac:	4b59      	ldr	r3, [pc, #356]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 030c 	and.w	r3, r3, #12
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d00d      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x40>
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	f200 80a1 	bhi.w	8003900 <HAL_RCC_GetSysClockFreq+0x16c>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x34>
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d003      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x3a>
 80037c6:	e09b      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b53      	ldr	r3, [pc, #332]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x184>)
 80037ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037cc:	e09b      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ce:	4b53      	ldr	r3, [pc, #332]	@ (800391c <HAL_RCC_GetSysClockFreq+0x188>)
 80037d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80037d2:	e098      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x180>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037de:	4b4d      	ldr	r3, [pc, #308]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x180>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d028      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	099b      	lsrs	r3, r3, #6
 80037f0:	2200      	movs	r2, #0
 80037f2:	623b      	str	r3, [r7, #32]
 80037f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037fc:	2100      	movs	r1, #0
 80037fe:	4b47      	ldr	r3, [pc, #284]	@ (800391c <HAL_RCC_GetSysClockFreq+0x188>)
 8003800:	fb03 f201 	mul.w	r2, r3, r1
 8003804:	2300      	movs	r3, #0
 8003806:	fb00 f303 	mul.w	r3, r0, r3
 800380a:	4413      	add	r3, r2
 800380c:	4a43      	ldr	r2, [pc, #268]	@ (800391c <HAL_RCC_GetSysClockFreq+0x188>)
 800380e:	fba0 1202 	umull	r1, r2, r0, r2
 8003812:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003814:	460a      	mov	r2, r1
 8003816:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800381a:	4413      	add	r3, r2
 800381c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800381e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003820:	2200      	movs	r2, #0
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	61fa      	str	r2, [r7, #28]
 8003826:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800382a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800382e:	f7fc fcd3 	bl	80001d8 <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4613      	mov	r3, r2
 8003838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800383a:	e053      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800383c:	4b35      	ldr	r3, [pc, #212]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x180>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	2200      	movs	r2, #0
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	617a      	str	r2, [r7, #20]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800384e:	f04f 0b00 	mov.w	fp, #0
 8003852:	4652      	mov	r2, sl
 8003854:	465b      	mov	r3, fp
 8003856:	f04f 0000 	mov.w	r0, #0
 800385a:	f04f 0100 	mov.w	r1, #0
 800385e:	0159      	lsls	r1, r3, #5
 8003860:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003864:	0150      	lsls	r0, r2, #5
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	ebb2 080a 	subs.w	r8, r2, sl
 800386e:	eb63 090b 	sbc.w	r9, r3, fp
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800387e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003882:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003886:	ebb2 0408 	subs.w	r4, r2, r8
 800388a:	eb63 0509 	sbc.w	r5, r3, r9
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	00eb      	lsls	r3, r5, #3
 8003898:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800389c:	00e2      	lsls	r2, r4, #3
 800389e:	4614      	mov	r4, r2
 80038a0:	461d      	mov	r5, r3
 80038a2:	eb14 030a 	adds.w	r3, r4, sl
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	eb45 030b 	adc.w	r3, r5, fp
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ba:	4629      	mov	r1, r5
 80038bc:	028b      	lsls	r3, r1, #10
 80038be:	4621      	mov	r1, r4
 80038c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038c4:	4621      	mov	r1, r4
 80038c6:	028a      	lsls	r2, r1, #10
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ce:	2200      	movs	r2, #0
 80038d0:	60bb      	str	r3, [r7, #8]
 80038d2:	60fa      	str	r2, [r7, #12]
 80038d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038d8:	f7fc fc7e 	bl	80001d8 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4613      	mov	r3, r2
 80038e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <HAL_RCC_GetSysClockFreq+0x180>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	3301      	adds	r3, #1
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80038f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038fe:	e002      	b.n	8003906 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003900:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <HAL_RCC_GetSysClockFreq+0x184>)
 8003902:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003904:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003908:	4618      	mov	r0, r3
 800390a:	3740      	adds	r7, #64	@ 0x40
 800390c:	46bd      	mov	sp, r7
 800390e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800
 8003918:	00f42400 	.word	0x00f42400
 800391c:	017d7840 	.word	0x017d7840

08003920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b03      	ldr	r3, [pc, #12]	@ (8003934 <HAL_RCC_GetHCLKFreq+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff0 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003940:	4602      	mov	r2, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0a9b      	lsrs	r3, r3, #10
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4903      	ldr	r1, [pc, #12]	@ (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5ccb      	ldrb	r3, [r1, r3]
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	08005254 	.word	0x08005254

08003960 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e07b      	b.n	8003a6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	d108      	bne.n	800398c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003982:	d009      	beq.n	8003998 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	61da      	str	r2, [r3, #28]
 800398a:	e005      	b.n	8003998 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fd fdca 	bl	800154c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a12:	431a      	orrs	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1c:	ea42 0103 	orr.w	r1, r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	0c1b      	lsrs	r3, r3, #16
 8003a36:	f003 0104 	and.w	r1, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	f003 0210 	and.w	r2, r3, #16
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b088      	sub	sp, #32
 8003a76:	af02      	add	r7, sp, #8
 8003a78:	60f8      	str	r0, [r7, #12]
 8003a7a:	60b9      	str	r1, [r7, #8]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d001      	beq.n	8003a92 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e104      	b.n	8003c9c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a9a:	d112      	bne.n	8003ac2 <HAL_SPI_Receive+0x50>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f8f3 	bl	8003ca4 <HAL_SPI_TransmitReceive>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	e0ec      	b.n	8003c9c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ac2:	f7fd ff25 	bl	8001910 <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d002      	beq.n	8003ad4 <HAL_SPI_Receive+0x62>
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0e1      	b.n	8003c9c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_SPI_Receive+0x74>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e0da      	b.n	8003c9c <HAL_SPI_Receive+0x22a>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2204      	movs	r2, #4
 8003af2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	88fa      	ldrh	r2, [r7, #6]
 8003b06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	88fa      	ldrh	r2, [r7, #6]
 8003b0c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b34:	d10f      	bne.n	8003b56 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b60:	2b40      	cmp	r3, #64	@ 0x40
 8003b62:	d007      	beq.n	8003b74 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d170      	bne.n	8003c5e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b7c:	e035      	b.n	8003bea <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d115      	bne.n	8003bb8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f103 020c 	add.w	r2, r3, #12
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b98:	7812      	ldrb	r2, [r2, #0]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bb6:	e018      	b.n	8003bea <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bb8:	f7fd feaa 	bl	8001910 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d803      	bhi.n	8003bd0 <HAL_SPI_Receive+0x15e>
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bce:	d102      	bne.n	8003bd6 <HAL_SPI_Receive+0x164>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e058      	b.n	8003c9c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1c4      	bne.n	8003b7e <HAL_SPI_Receive+0x10c>
 8003bf4:	e038      	b.n	8003c68 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d113      	bne.n	8003c2c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	68da      	ldr	r2, [r3, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0e:	b292      	uxth	r2, r2
 8003c10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c16:	1c9a      	adds	r2, r3, #2
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c2a:	e018      	b.n	8003c5e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c2c:	f7fd fe70 	bl	8001910 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d803      	bhi.n	8003c44 <HAL_SPI_Receive+0x1d2>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c42:	d102      	bne.n	8003c4a <HAL_SPI_Receive+0x1d8>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e01e      	b.n	8003c9c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1c6      	bne.n	8003bf6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	6839      	ldr	r1, [r7, #0]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fa4b 	bl	8004108 <SPI_EndRxTransaction>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	@ 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb6:	f7fd fe2b 	bl	8001910 <HAL_GetTick>
 8003cba:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cc2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003cca:	887b      	ldrh	r3, [r7, #2]
 8003ccc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cce:	7ffb      	ldrb	r3, [r7, #31]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d00c      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x4a>
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cda:	d106      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d102      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x46>
 8003ce4:	7ffb      	ldrb	r3, [r7, #31]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d001      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	e17f      	b.n	8003fee <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x5c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d002      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x5c>
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e174      	b.n	8003fee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_SPI_TransmitReceive+0x6e>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e16d      	b.n	8003fee <HAL_SPI_TransmitReceive+0x34a>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d003      	beq.n	8003d2e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2205      	movs	r2, #5
 8003d2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	887a      	ldrh	r2, [r7, #2]
 8003d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	887a      	ldrh	r2, [r7, #2]
 8003d44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	887a      	ldrh	r2, [r7, #2]
 8003d56:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	d007      	beq.n	8003d82 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8a:	d17e      	bne.n	8003e8a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_SPI_TransmitReceive+0xf6>
 8003d94:	8afb      	ldrh	r3, [r7, #22]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d16c      	bne.n	8003e74 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	881a      	ldrh	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003daa:	1c9a      	adds	r2, r3, #2
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dbe:	e059      	b.n	8003e74 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d11b      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x162>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d016      	beq.n	8003e06 <HAL_SPI_TransmitReceive+0x162>
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d113      	bne.n	8003e06 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	881a      	ldrh	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dee:	1c9a      	adds	r2, r3, #2
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d119      	bne.n	8003e48 <HAL_SPI_TransmitReceive+0x1a4>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d014      	beq.n	8003e48 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e28:	b292      	uxth	r2, r2
 8003e2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e30:	1c9a      	adds	r2, r3, #2
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e44:	2301      	movs	r3, #1
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e48:	f7fd fd62 	bl	8001910 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d80d      	bhi.n	8003e74 <HAL_SPI_TransmitReceive+0x1d0>
 8003e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e5e:	d009      	beq.n	8003e74 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e0bc      	b.n	8003fee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1a0      	bne.n	8003dc0 <HAL_SPI_TransmitReceive+0x11c>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d19b      	bne.n	8003dc0 <HAL_SPI_TransmitReceive+0x11c>
 8003e88:	e082      	b.n	8003f90 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_SPI_TransmitReceive+0x1f4>
 8003e92:	8afb      	ldrh	r3, [r7, #22]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d171      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	330c      	adds	r3, #12
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ebe:	e05d      	b.n	8003f7c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d11c      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x264>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d017      	beq.n	8003f08 <HAL_SPI_TransmitReceive+0x264>
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d114      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	7812      	ldrb	r2, [r2, #0]
 8003eea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d119      	bne.n	8003f4a <HAL_SPI_TransmitReceive+0x2a6>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d014      	beq.n	8003f4a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f46:	2301      	movs	r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f4a:	f7fd fce1 	bl	8001910 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d803      	bhi.n	8003f62 <HAL_SPI_TransmitReceive+0x2be>
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f60:	d102      	bne.n	8003f68 <HAL_SPI_TransmitReceive+0x2c4>
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d109      	bne.n	8003f7c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e038      	b.n	8003fee <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d19c      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x21c>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d197      	bne.n	8003ec0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f91d 	bl	80041d4 <SPI_EndRxTxTransaction>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e01d      	b.n	8003fee <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10a      	bne.n	8003fd0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fba:	2300      	movs	r3, #0
 8003fbc:	613b      	str	r3, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	613b      	str	r3, [r7, #16]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	613b      	str	r3, [r7, #16]
 8003fce:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003fec:	2300      	movs	r3, #0
  }
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3728      	adds	r7, #40	@ 0x28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004008:	f7fd fc82 	bl	8001910 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	4413      	add	r3, r2
 8004016:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004018:	f7fd fc7a 	bl	8001910 <HAL_GetTick>
 800401c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800401e:	4b39      	ldr	r3, [pc, #228]	@ (8004104 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	015b      	lsls	r3, r3, #5
 8004024:	0d1b      	lsrs	r3, r3, #20
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	fb02 f303 	mul.w	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800402e:	e054      	b.n	80040da <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004036:	d050      	beq.n	80040da <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004038:	f7fd fc6a 	bl	8001910 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	429a      	cmp	r2, r3
 8004046:	d902      	bls.n	800404e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d13d      	bne.n	80040ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800405c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004066:	d111      	bne.n	800408c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004070:	d004      	beq.n	800407c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800407a:	d107      	bne.n	800408c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800408a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004094:	d10f      	bne.n	80040b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e017      	b.n	80040fa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4013      	ands	r3, r2
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d19b      	bne.n	8004030 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000000 	.word	0x20000000

08004108 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800411c:	d111      	bne.n	8004142 <SPI_EndRxTransaction+0x3a>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004126:	d004      	beq.n	8004132 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004130:	d107      	bne.n	8004142 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004140:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800414a:	d12a      	bne.n	80041a2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004154:	d012      	beq.n	800417c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2200      	movs	r2, #0
 800415e:	2180      	movs	r1, #128	@ 0x80
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff ff49 	bl	8003ff8 <SPI_WaitFlagStateUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d02d      	beq.n	80041c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e026      	b.n	80041ca <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2200      	movs	r2, #0
 8004184:	2101      	movs	r1, #1
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f7ff ff36 	bl	8003ff8 <SPI_WaitFlagStateUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01a      	beq.n	80041c8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004196:	f043 0220 	orr.w	r2, r3, #32
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e013      	b.n	80041ca <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2200      	movs	r2, #0
 80041aa:	2101      	movs	r1, #1
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff ff23 	bl	8003ff8 <SPI_WaitFlagStateUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d007      	beq.n	80041c8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	f043 0220 	orr.w	r2, r3, #32
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e000      	b.n	80041ca <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2201      	movs	r2, #1
 80041e8:	2102      	movs	r1, #2
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f7ff ff04 	bl	8003ff8 <SPI_WaitFlagStateUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e032      	b.n	800426c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004206:	4b1b      	ldr	r3, [pc, #108]	@ (8004274 <SPI_EndRxTxTransaction+0xa0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1b      	ldr	r2, [pc, #108]	@ (8004278 <SPI_EndRxTxTransaction+0xa4>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	0d5b      	lsrs	r3, r3, #21
 8004212:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004216:	fb02 f303 	mul.w	r3, r2, r3
 800421a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004224:	d112      	bne.n	800424c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2200      	movs	r2, #0
 800422e:	2180      	movs	r1, #128	@ 0x80
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7ff fee1 	bl	8003ff8 <SPI_WaitFlagStateUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d016      	beq.n	800426a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e00f      	b.n	800426c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	3b01      	subs	r3, #1
 8004256:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b80      	cmp	r3, #128	@ 0x80
 8004264:	d0f2      	beq.n	800424c <SPI_EndRxTxTransaction+0x78>
 8004266:	e000      	b.n	800426a <SPI_EndRxTxTransaction+0x96>
        break;
 8004268:	bf00      	nop
  }

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20000000 	.word	0x20000000
 8004278:	165e9f81 	.word	0x165e9f81

0800427c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e041      	b.n	8004312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fd f9bc 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2202      	movs	r2, #2
 80042ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f000 fbb8 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d001      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e044      	b.n	80043be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a1e      	ldr	r2, [pc, #120]	@ (80043cc <HAL_TIM_Base_Start_IT+0xb0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x6c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435e:	d013      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x6c>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1a      	ldr	r2, [pc, #104]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x6c>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a19      	ldr	r2, [pc, #100]	@ (80043d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x6c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a17      	ldr	r2, [pc, #92]	@ (80043d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x6c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a16      	ldr	r2, [pc, #88]	@ (80043dc <HAL_TIM_Base_Start_IT+0xc0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d111      	bne.n	80043ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b06      	cmp	r3, #6
 8004398:	d010      	beq.n	80043bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043aa:	e007      	b.n	80043bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40010000 	.word	0x40010000
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40014000 	.word	0x40014000

080043e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e041      	b.n	8004476 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f839 	bl	800447e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f000 fb06 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
 800449a:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e041      	b.n	800452a <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd f88e 	bl	80015dc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f000 faac 	bl	8004a30 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0208 	bic.w	r2, r2, #8
 80044e6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6819      	ldr	r1, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01b      	beq.n	8004596 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0202 	mvn.w	r2, #2
 8004566:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 fa38 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 8004582:	e005      	b.n	8004590 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fa2a 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 fa3b 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01b      	beq.n	80045e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f06f 0204 	mvn.w	r2, #4
 80045b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d003      	beq.n	80045d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fa12 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 80045ce:	e005      	b.n	80045dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa04 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa15 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d020      	beq.n	800462e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01b      	beq.n	800462e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0208 	mvn.w	r2, #8
 80045fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2204      	movs	r2, #4
 8004604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f9ec 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 800461a:	e005      	b.n	8004628 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f9de 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9ef 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f003 0310 	and.w	r3, r3, #16
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01b      	beq.n	800467a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f06f 0210 	mvn.w	r2, #16
 800464a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2208      	movs	r2, #8
 8004650:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f9c6 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 8004666:	e005      	b.n	8004674 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 f9b8 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9c9 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f06f 0201 	mvn.w	r2, #1
 8004696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7fc fc01 	bl	8000ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00c      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 fd73 	bl	80051a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00c      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f99a 	bl	8004a1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00c      	beq.n	800470a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f06f 0220 	mvn.w	r2, #32
 8004702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fd45 	bl	8005194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_TIM_OC_ConfigChannel+0x1e>
 800472e:	2302      	movs	r3, #2
 8004730:	e048      	b.n	80047c4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b0c      	cmp	r3, #12
 800473e:	d839      	bhi.n	80047b4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004740:	a201      	add	r2, pc, #4	@ (adr r2, 8004748 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004746:	bf00      	nop
 8004748:	0800477d 	.word	0x0800477d
 800474c:	080047b5 	.word	0x080047b5
 8004750:	080047b5 	.word	0x080047b5
 8004754:	080047b5 	.word	0x080047b5
 8004758:	0800478b 	.word	0x0800478b
 800475c:	080047b5 	.word	0x080047b5
 8004760:	080047b5 	.word	0x080047b5
 8004764:	080047b5 	.word	0x080047b5
 8004768:	08004799 	.word	0x08004799
 800476c:	080047b5 	.word	0x080047b5
 8004770:	080047b5 	.word	0x080047b5
 8004774:	080047b5 	.word	0x080047b5
 8004778:	080047a7 	.word	0x080047a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f9e0 	bl	8004b48 <TIM_OC1_SetConfig>
      break;
 8004788:	e017      	b.n	80047ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68b9      	ldr	r1, [r7, #8]
 8004790:	4618      	mov	r0, r3
 8004792:	f000 fa3f 	bl	8004c14 <TIM_OC2_SetConfig>
      break;
 8004796:	e010      	b.n	80047ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68b9      	ldr	r1, [r7, #8]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 faa4 	bl	8004cec <TIM_OC3_SetConfig>
      break;
 80047a4:	e009      	b.n	80047ba <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fb07 	bl	8004dc0 <TIM_OC4_SetConfig>
      break;
 80047b2:	e002      	b.n	80047ba <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	75fb      	strb	r3, [r7, #23]
      break;
 80047b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80047c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_TIM_ConfigClockSource+0x1c>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e0b4      	b.n	8004952 <HAL_TIM_ConfigClockSource+0x186>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800480e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004820:	d03e      	beq.n	80048a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004826:	f200 8087 	bhi.w	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 800482a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800482e:	f000 8086 	beq.w	800493e <HAL_TIM_ConfigClockSource+0x172>
 8004832:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004836:	d87f      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004838:	2b70      	cmp	r3, #112	@ 0x70
 800483a:	d01a      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0xa6>
 800483c:	2b70      	cmp	r3, #112	@ 0x70
 800483e:	d87b      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004840:	2b60      	cmp	r3, #96	@ 0x60
 8004842:	d050      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004844:	2b60      	cmp	r3, #96	@ 0x60
 8004846:	d877      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004848:	2b50      	cmp	r3, #80	@ 0x50
 800484a:	d03c      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0xfa>
 800484c:	2b50      	cmp	r3, #80	@ 0x50
 800484e:	d873      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	d058      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0x13a>
 8004854:	2b40      	cmp	r3, #64	@ 0x40
 8004856:	d86f      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004858:	2b30      	cmp	r3, #48	@ 0x30
 800485a:	d064      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15a>
 800485c:	2b30      	cmp	r3, #48	@ 0x30
 800485e:	d86b      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004860:	2b20      	cmp	r3, #32
 8004862:	d060      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15a>
 8004864:	2b20      	cmp	r3, #32
 8004866:	d867      	bhi.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05c      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15a>
 800486c:	2b10      	cmp	r3, #16
 800486e:	d05a      	beq.n	8004926 <HAL_TIM_ConfigClockSource+0x15a>
 8004870:	e062      	b.n	8004938 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004882:	f000 fbf8 	bl	8005076 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004894:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	609a      	str	r2, [r3, #8]
      break;
 800489e:	e04f      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048b0:	f000 fbe1 	bl	8005076 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048c2:	609a      	str	r2, [r3, #8]
      break;
 80048c4:	e03c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048d2:	461a      	mov	r2, r3
 80048d4:	f000 fb55 	bl	8004f82 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2150      	movs	r1, #80	@ 0x50
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fbae 	bl	8005040 <TIM_ITRx_SetConfig>
      break;
 80048e4:	e02c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80048f2:	461a      	mov	r2, r3
 80048f4:	f000 fb74 	bl	8004fe0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2160      	movs	r1, #96	@ 0x60
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fb9e 	bl	8005040 <TIM_ITRx_SetConfig>
      break;
 8004904:	e01c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004912:	461a      	mov	r2, r3
 8004914:	f000 fb35 	bl	8004f82 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2140      	movs	r1, #64	@ 0x40
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fb8e 	bl	8005040 <TIM_ITRx_SetConfig>
      break;
 8004924:	e00c      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f000 fb85 	bl	8005040 <TIM_ITRx_SetConfig>
      break;
 8004936:	e003      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
      break;
 800493c:	e000      	b.n	8004940 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800493e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004950:	7bfb      	ldrb	r3, [r7, #15]
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800496a:	2b01      	cmp	r3, #1
 800496c:	d101      	bne.n	8004972 <HAL_TIM_SlaveConfigSynchro+0x18>
 800496e:	2302      	movs	r3, #2
 8004970:	e031      	b.n	80049d6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2202      	movs	r2, #2
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004982:	6839      	ldr	r1, [r7, #0]
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 fa6b 	bl	8004e60 <TIM_SlaveTimer_SetConfig>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e018      	b.n	80049d6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049c2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a3a      	ldr	r2, [pc, #232]	@ (8004b2c <TIM_Base_SetConfig+0xfc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00f      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4e:	d00b      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a37      	ldr	r2, [pc, #220]	@ (8004b30 <TIM_Base_SetConfig+0x100>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a36      	ldr	r2, [pc, #216]	@ (8004b34 <TIM_Base_SetConfig+0x104>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0x38>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a35      	ldr	r2, [pc, #212]	@ (8004b38 <TIM_Base_SetConfig+0x108>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d108      	bne.n	8004a7a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b2c <TIM_Base_SetConfig+0xfc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d01b      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a88:	d017      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a28      	ldr	r2, [pc, #160]	@ (8004b30 <TIM_Base_SetConfig+0x100>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d013      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a27      	ldr	r2, [pc, #156]	@ (8004b34 <TIM_Base_SetConfig+0x104>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00f      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <TIM_Base_SetConfig+0x108>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d00b      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a25      	ldr	r2, [pc, #148]	@ (8004b3c <TIM_Base_SetConfig+0x10c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d007      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a24      	ldr	r2, [pc, #144]	@ (8004b40 <TIM_Base_SetConfig+0x110>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_Base_SetConfig+0x8a>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a23      	ldr	r2, [pc, #140]	@ (8004b44 <TIM_Base_SetConfig+0x114>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d108      	bne.n	8004acc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a0e      	ldr	r2, [pc, #56]	@ (8004b2c <TIM_Base_SetConfig+0xfc>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d103      	bne.n	8004b00 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d105      	bne.n	8004b1e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f023 0201 	bic.w	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	611a      	str	r2, [r3, #16]
  }
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	40010000 	.word	0x40010000
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40000800 	.word	0x40000800
 8004b38:	40000c00 	.word	0x40000c00
 8004b3c:	40014000 	.word	0x40014000
 8004b40:	40014400 	.word	0x40014400
 8004b44:	40014800 	.word	0x40014800

08004b48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	f023 0201 	bic.w	r2, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f023 0303 	bic.w	r3, r3, #3
 8004b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	f023 0302 	bic.w	r3, r3, #2
 8004b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004c10 <TIM_OC1_SetConfig+0xc8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d10c      	bne.n	8004bbe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f023 0308 	bic.w	r3, r3, #8
 8004baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	697a      	ldr	r2, [r7, #20]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f023 0304 	bic.w	r3, r3, #4
 8004bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	@ (8004c10 <TIM_OC1_SetConfig+0xc8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d111      	bne.n	8004bea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	621a      	str	r2, [r3, #32]
}
 8004c04:	bf00      	nop
 8004c06:	371c      	adds	r7, #28
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr
 8004c10:	40010000 	.word	0x40010000

08004c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f023 0210 	bic.w	r2, r3, #16
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0320 	bic.w	r3, r3, #32
 8004c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ce8 <TIM_OC2_SetConfig+0xd4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d10d      	bne.n	8004c90 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a15      	ldr	r2, [pc, #84]	@ (8004ce8 <TIM_OC2_SetConfig+0xd4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d113      	bne.n	8004cc0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	621a      	str	r2, [r3, #32]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40010000 	.word	0x40010000

08004cec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0303 	bic.w	r3, r3, #3
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1d      	ldr	r2, [pc, #116]	@ (8004dbc <TIM_OC3_SetConfig+0xd0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10d      	bne.n	8004d66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a14      	ldr	r2, [pc, #80]	@ (8004dbc <TIM_OC3_SetConfig+0xd0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d113      	bne.n	8004d96 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	011b      	lsls	r3, r3, #4
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	621a      	str	r2, [r3, #32]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40010000 	.word	0x40010000

08004dc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	031b      	lsls	r3, r3, #12
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a10      	ldr	r2, [pc, #64]	@ (8004e5c <TIM_OC4_SetConfig+0x9c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d109      	bne.n	8004e34 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	019b      	lsls	r3, r3, #6
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	40010000 	.word	0x40010000

08004e60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f023 0307 	bic.w	r3, r3, #7
 8004e8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b70      	cmp	r3, #112	@ 0x70
 8004ea8:	d01a      	beq.n	8004ee0 <TIM_SlaveTimer_SetConfig+0x80>
 8004eaa:	2b70      	cmp	r3, #112	@ 0x70
 8004eac:	d860      	bhi.n	8004f70 <TIM_SlaveTimer_SetConfig+0x110>
 8004eae:	2b60      	cmp	r3, #96	@ 0x60
 8004eb0:	d054      	beq.n	8004f5c <TIM_SlaveTimer_SetConfig+0xfc>
 8004eb2:	2b60      	cmp	r3, #96	@ 0x60
 8004eb4:	d85c      	bhi.n	8004f70 <TIM_SlaveTimer_SetConfig+0x110>
 8004eb6:	2b50      	cmp	r3, #80	@ 0x50
 8004eb8:	d046      	beq.n	8004f48 <TIM_SlaveTimer_SetConfig+0xe8>
 8004eba:	2b50      	cmp	r3, #80	@ 0x50
 8004ebc:	d858      	bhi.n	8004f70 <TIM_SlaveTimer_SetConfig+0x110>
 8004ebe:	2b40      	cmp	r3, #64	@ 0x40
 8004ec0:	d019      	beq.n	8004ef6 <TIM_SlaveTimer_SetConfig+0x96>
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	d854      	bhi.n	8004f70 <TIM_SlaveTimer_SetConfig+0x110>
 8004ec6:	2b30      	cmp	r3, #48	@ 0x30
 8004ec8:	d055      	beq.n	8004f76 <TIM_SlaveTimer_SetConfig+0x116>
 8004eca:	2b30      	cmp	r3, #48	@ 0x30
 8004ecc:	d850      	bhi.n	8004f70 <TIM_SlaveTimer_SetConfig+0x110>
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d051      	beq.n	8004f76 <TIM_SlaveTimer_SetConfig+0x116>
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d84c      	bhi.n	8004f70 <TIM_SlaveTimer_SetConfig+0x110>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d04d      	beq.n	8004f76 <TIM_SlaveTimer_SetConfig+0x116>
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d04b      	beq.n	8004f76 <TIM_SlaveTimer_SetConfig+0x116>
 8004ede:	e047      	b.n	8004f70 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004ef0:	f000 f8c1 	bl	8005076 <TIM_ETR_SetConfig>
      break;
 8004ef4:	e040      	b.n	8004f78 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	d101      	bne.n	8004f02 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e03b      	b.n	8004f7a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6a1a      	ldr	r2, [r3, #32]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0201 	bic.w	r2, r2, #1
 8004f18:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f28:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	011b      	lsls	r3, r3, #4
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	621a      	str	r2, [r3, #32]
      break;
 8004f46:	e017      	b.n	8004f78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f54:	461a      	mov	r2, r3
 8004f56:	f000 f814 	bl	8004f82 <TIM_TI1_ConfigInputStage>
      break;
 8004f5a:	e00d      	b.n	8004f78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f000 f839 	bl	8004fe0 <TIM_TI2_ConfigInputStage>
      break;
 8004f6e:	e003      	b.n	8004f78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	75fb      	strb	r3, [r7, #23]
      break;
 8004f74:	e000      	b.n	8004f78 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004f76:	bf00      	nop
  }

  return status;
 8004f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f023 0201 	bic.w	r2, r3, #1
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 030a 	bic.w	r3, r3, #10
 8004fbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	621a      	str	r2, [r3, #32]
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	f023 0210 	bic.w	r2, r3, #16
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800500a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	031b      	lsls	r3, r3, #12
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800501c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	621a      	str	r2, [r3, #32]
}
 8005034:	bf00      	nop
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	f043 0307 	orr.w	r3, r3, #7
 8005062:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	609a      	str	r2, [r3, #8]
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005076:	b480      	push	{r7}
 8005078:	b087      	sub	sp, #28
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
 8005082:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005090:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	021a      	lsls	r2, r3, #8
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	431a      	orrs	r2, r3
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4313      	orrs	r3, r2
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	609a      	str	r2, [r3, #8]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e050      	b.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1c      	ldr	r2, [pc, #112]	@ (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d018      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800511c:	d013      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a18      	ldr	r2, [pc, #96]	@ (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a16      	ldr	r2, [pc, #88]	@ (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a15      	ldr	r2, [pc, #84]	@ (800518c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a13      	ldr	r2, [pc, #76]	@ (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d10c      	bne.n	8005160 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800514c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	4313      	orrs	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40010000 	.word	0x40010000
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40014000 	.word	0x40014000

08005194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <memset>:
 80051bc:	4402      	add	r2, r0
 80051be:	4603      	mov	r3, r0
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d100      	bne.n	80051c6 <memset+0xa>
 80051c4:	4770      	bx	lr
 80051c6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ca:	e7f9      	b.n	80051c0 <memset+0x4>

080051cc <__libc_init_array>:
 80051cc:	b570      	push	{r4, r5, r6, lr}
 80051ce:	4d0d      	ldr	r5, [pc, #52]	@ (8005204 <__libc_init_array+0x38>)
 80051d0:	4c0d      	ldr	r4, [pc, #52]	@ (8005208 <__libc_init_array+0x3c>)
 80051d2:	1b64      	subs	r4, r4, r5
 80051d4:	10a4      	asrs	r4, r4, #2
 80051d6:	2600      	movs	r6, #0
 80051d8:	42a6      	cmp	r6, r4
 80051da:	d109      	bne.n	80051f0 <__libc_init_array+0x24>
 80051dc:	4d0b      	ldr	r5, [pc, #44]	@ (800520c <__libc_init_array+0x40>)
 80051de:	4c0c      	ldr	r4, [pc, #48]	@ (8005210 <__libc_init_array+0x44>)
 80051e0:	f000 f818 	bl	8005214 <_init>
 80051e4:	1b64      	subs	r4, r4, r5
 80051e6:	10a4      	asrs	r4, r4, #2
 80051e8:	2600      	movs	r6, #0
 80051ea:	42a6      	cmp	r6, r4
 80051ec:	d105      	bne.n	80051fa <__libc_init_array+0x2e>
 80051ee:	bd70      	pop	{r4, r5, r6, pc}
 80051f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f4:	4798      	blx	r3
 80051f6:	3601      	adds	r6, #1
 80051f8:	e7ee      	b.n	80051d8 <__libc_init_array+0xc>
 80051fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fe:	4798      	blx	r3
 8005200:	3601      	adds	r6, #1
 8005202:	e7f2      	b.n	80051ea <__libc_init_array+0x1e>
 8005204:	08005264 	.word	0x08005264
 8005208:	08005264 	.word	0x08005264
 800520c:	08005264 	.word	0x08005264
 8005210:	08005268 	.word	0x08005268

08005214 <_init>:
 8005214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005216:	bf00      	nop
 8005218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521a:	bc08      	pop	{r3}
 800521c:	469e      	mov	lr, r3
 800521e:	4770      	bx	lr

08005220 <_fini>:
 8005220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005222:	bf00      	nop
 8005224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005226:	bc08      	pop	{r3}
 8005228:	469e      	mov	lr, r3
 800522a:	4770      	bx	lr
